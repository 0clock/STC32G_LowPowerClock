C251 COMPILER V5.60.0,  BMC050                                                             25/04/24  01:27:43  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE BMC050
OBJECT MODULE PLACED IN BMC050.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE BMC050.c XSMALL OPTIMIZE(9,SPEED) BROWSE DEBUG TABS(2) 

stmt  level    source

    1          #include "BMC050.h"
    2          #include "time.h"
    3          #include "UART1.h"
    4          #include "IIC.h"
    5          #include "CompassMenu.h"
    6          #include "DATA.h"
    7          
    8          
    9          extern u8 xdata DMABuffer[96];
   10          
   11          const int code angle[15] = {11520,6801,3593,1824,916,458,229,115,57,29,14,7,4,2,1};
   12          
   13          
   14          extern u16 dat00[System_data_num];
   15          extern u16 dat00_low[System_data_num];
   16          extern u8 xdata dat00_flag[System_data_num];
   17          
   18          /****************************** Áù°Áú†ÂØÑÂ≠òÂô®ÁªÑ ***********************************/
   19          extern u16 Sleep_Queue[Sleep_queue_num];
   20          extern u16 Sleep_Queue_task[Sleep_queue_num];
   21          extern u16 Sleep_Queue_count;
   22          extern u16 Sleep_Queue_count_target;
   23          
   24          
   25          
   26          int Magnetism_X[7] = {0};
   27          int Magnetism_X1[7] = {0};
   28          
   29          int Magnetism_Y[7] = {0};
   30          int Magnetism_Y1[7] = {0};
   31          
   32          
   33          int Magnetism_JD[5] = {0};
   34          int Magnetism_JD1[5] = {0};
   35          
   36          u16 JD_low = 0;
   37          u8 JD_low_num = 0;
   38          
   39          
   40          
   41          
   42          
   43          //========================================================================
   44          // ÂáΩÊï∞: Get_Magnetism_dat(int *dat1,u16 dat,u8 num)
   45          // ÊèèËø∞: Ê±ÇÂπ≥ÂùáÂÄºÔºåÊª§Ê≥¢
   46          // ÂèÇÊï∞: 
   47          // ËøîÂõû: 
   48          // ÁâàÊú¨: V1.0 2023.02.05
   49          //========================================================================
   50          int Get_Magnetism_dat(int *dat1,u16 dat,u8 num)
   51          {
   52   1          int adc_dat = 0;
   53   1          u8 i = 0;
   54   1          num = num-1;
   55   1          for(i=0; i<num; i++)
   56   1          {
   57   2              dat1[i] = dat1[i+1];
   58   2          }
   59   1          dat1[num] = (int)dat;
C251 COMPILER V5.60.0,  BMC050                                                             25/04/24  01:27:43  PAGE 2   

   60   1          num++;
   61   1          for(i=0; i<num; i++)
   62   1          {
   63   2              adc_dat += dat1[i];
   64   2          }
   65   1          adc_dat = adc_dat/num;
   66   1      
   67   1          return  adc_dat;
   68   1      }
   69          
   70          
   71          
   72          
   73          //========================================================================
   74          // ÂáΩÊï∞: int convert_1(u16 dat1)
   75          // ÊèèËø∞: u16ËΩ¨int
   76          // ÂèÇÊï∞: 
   77          // ËøîÂõû: 
   78          // ÁâàÊú¨: V1.0 2023.02.05
   79          //========================================================================
   80          int convert_1(u16 dat1)
   81          {
   82   1          int adc_dat=0;
   83   1      
   84   1      
   85   1          if(dat1 & 0x1000)
   86   1          {
   87   2              adc_dat= 0x1fff - dat1 + 1;
   88   2              adc_dat = adc_dat*(-1);
   89   2          }
   90   1          else
   91   1          {
   92   2              adc_dat = dat1;
   93   2          }
   94   1      
   95   1          return  adc_dat;
   96   1      }
   97          
   98          
   99          
  100          
  101          
  102          
  103          
  104          
  105          
  106          //========================================================================
  107          // ÂáΩÊï∞: void Magnetometer_initi()
  108          // ÊèèËø∞: Á£ÅÂº∫ËÆ°ÂàùÂßãÂåñ
  109          // ÂèÇÊï∞: 
  110          // ËøîÂõû: 
  111          // ÁâàÊú¨: V1.0 2023.02.05
  112          //========================================================================
  113          void Magnetometer_initi()
  114          {
  115   1          IIC_W2bit(0x22,0x4b,0x01);// 0x01 ‰ºëÁú†Ê®°Âºè 0x80 ËΩØÂ§ç‰Ωç
  116   1          Sleep_delay_Time(20);//Á≠âÂæÖÂæàÈáçË¶ÅÔºå‰∏çÁÑ∂ÊåÇËµ∑‰∏ç‰∫Ü
  117   1          IIC_W2bit(0x22,0x51,0x0A);//XY ÈáçÂ§ç21Ê¨°
  118   1          IIC_W2bit(0x22,0x4C,0x00);
  119   1          IIC_W2bit(0x22,0x4b,0x00);//ÊåÇËµ∑
  120   1      }
  121          
  122          //========================================================================
  123          // ÂáΩÊï∞: void  Magnetometer_OPEN()
  124          // ÊèèËø∞: Á£ÅÂº∫ËÆ°ÊâìÂºÄ
  125          // ÂèÇÊï∞: 
C251 COMPILER V5.60.0,  BMC050                                                             25/04/24  01:27:43  PAGE 3   

  126          // ËøîÂõû: 
  127          // ÁâàÊú¨: V1.0 2023.02.05
  128          //========================================================================
  129          void  Magnetometer_OPEN()
  130          {
  131   1          IIC_W2bit(0x22,0x4b,0x01);//ÂàáÊç¢Âà∞‰ºëÁú†Ê®°Âºè
  132   1          IIC_W2bit(0x22,0x4C,0x02);//ÈááÊ†∑ÈÄüÂ∫¶10Hz,Âº∫Âà∂ÈááÊ†∑Ê®°Âºè
  133   1          Sleep_delay_Time(20);
  134   1      }
  135          //========================================================================
  136          // ÂáΩÊï∞: void  Magnetometer_Close()
  137          // ÊèèËø∞: Á£ÅÂº∫ËÆ°ÂÖ≥Èó≠
  138          // ÂèÇÊï∞: 
  139          // ËøîÂõû: 
  140          // ÁâàÊú¨: V1.0 2023.02.05
  141          //========================================================================
  142          void  Magnetometer_Close()
  143          {
  144   1          IIC_W2bit(0x22,0x4b,0x00);//ÂàáÊç¢Âà∞‰ºëÁú†Ê®°Âºè
  145   1      }
  146          
  147          
  148          
  149          
  150          
  151          //========================================================================
  152          // ÂáΩÊï∞: AtanÁÆóÊ≥ï   ÊÑüË∞¢Á∫¢Áü≥ÁîµË∑ØÂêß  ÂêßÂèãKAAAsSÔºàÊòüÊòüÊâì‰∏çÂá∫Êù•ÔºâÂÖ¨ÂºÄÁöÑ„ÄêCORDICÁÆóÊ
             -≥ï„ÄëÊÄùË∑Ø
  153          // ÊèèËø∞: 
  154          // ÂèÇÊï∞: 
  155          // ËøîÂõû: 
  156          // ÁâàÊú¨: V1.0 2023.02.05
  157          //========================================================================
  158          u16 atan(int x1,int y1)//ÁªìÊûúÈúÄË¶Å/256
  159          {
  160   1          int i =0;
  161   1          long x_new = 0;
  162   1          long y_new = 0;
  163   1          long xx,yy;
  164   1          long angleSum =0;
  165   1          long x =x1;
  166   1          long y =y1;
  167   1      
  168   1          if(x<0) x = x*(-1);
  169   1          if(y<0) y = y*(-1);
  170   1      
  171   1          x *= 1024;
  172   1          y *= 1024;
  173   1          for(i=0; i<15; i++)
  174   1          {
  175   2              yy = (y>>i);
  176   2              xx = (x>>i);
  177   2              if(y>0)
  178   2              {
  179   3                  x_new = (x + yy);
  180   3                  y_new = (y - xx);
  181   3                  angleSum += angle[i];
  182   3              }
  183   2              else
  184   2              {
  185   3                  x_new = x - yy;
  186   3                  y_new = y + xx;
  187   3                  angleSum -= angle[i];
  188   3              }
  189   2              x = x_new;
  190   2              y = y_new;
C251 COMPILER V5.60.0,  BMC050                                                             25/04/24  01:27:43  PAGE 4   

  191   2          }
  192   1      
  193   1          return  (u16)angleSum;
  194   1      }
  195          
  196          //========================================================================
  197          // ÂáΩÊï∞: void Angle_calculation(int x1,int y1)
  198          // ÊèèËø∞: ÂÅö‰∫Ü‰∏Ä‰∫õË±°ÈôêÁöÑÂà§Êñ≠ÔºåÊò†Â∞ÑÂú®0~360Â∫¶
  199          // ÂèÇÊï∞: 
  200          // ËøîÂõû: 
  201          // ÁâàÊú¨: V1.0 2023.02.05
  202          //========================================================================
  203          void Angle_calculation(int x1,int y1)
  204          {
  205   1          bit a=0;
  206   1          bit b=0;
  207   1          u16 Angle = 0;
  208   1      
  209   1          if(x1<0) a=1;
  210   1          if(y1<0) b=1;
  211   1      
  212   1          if(x1 == 0)
  213   1          {
  214   2              if(y1 > 0)
  215   2              {
  216   3                  Angle =90;
  217   3              }
  218   2              else
  219   2              {
  220   3                  Angle =270;
  221   3              }
  222   2          }
  223   1          else if(y1 == 0)
  224   1          {
  225   2              if(x1 > 0)
  226   2              {
  227   3                  Angle =360;
  228   3              }
  229   2              else
  230   2              {
  231   3                  Angle =180;
  232   3              }
  233   2          }
  234   1          else
  235   1          {
  236   2              Angle = (atan(y1,x1))/256;
  237   2      
  238   2              if(!a && b)
  239   2              {
  240   3                  Angle = Angle +270;
  241   3              }
  242   2              else if(a && b)
  243   2              {
  244   3                  Angle = 270 -Angle;
  245   3              }
  246   2              else if(a && !b)
  247   2              {
  248   3                  Angle = Angle +90;
  249   3              }
  250   2              else
  251   2              {
  252   3                  Angle = 90 -Angle;
  253   3              }
  254   2      
  255   2          }
  256   1      
C251 COMPILER V5.60.0,  BMC050                                                             25/04/24  01:27:43  PAGE 5   

  257   1          dat00[0x0068] = Angle;
  258   1      
  259   1      
  260   1      
  261   1      
  262   1      
  263   1      
  264   1      }
  265          
  266          
  267          
  268          
  269          
  270          
  271          
  272          
  273          
  274          
  275          //========================================================================
  276          // ÂáΩÊï∞: u16 Magnetometer_measure_1(u8 aa,bit b)
  277          // ÊèèËø∞: ËØªÂèñ‰º†ÊÑüÂô®Êï∞ÊçÆ
  278          // ÂèÇÊï∞: 
  279          // ËøîÂõû: 
  280          // ÁâàÊú¨: V1.0 2023.02.05
  281          //========================================================================
  282          u16 Magnetometer_measure_1(u8 aa,bit b)
  283          {
  284   1          u8 a = 0;
  285   1          u16 c = 0;
  286   1          a = RecvData();                             //ËØªÂèñÊï∞ÊçÆ2
  287   1          SendACK();
  288   1          c = RecvData();                             //ËØªÂèñÊï∞ÊçÆ2
  289   1          if(b)
  290   1          {
  291   2              SendACK();
  292   2          }
  293   1          else
  294   1          {
  295   2              SendNAK();
  296   2              Stop();
  297   2          }
  298   1          c = (((c<<8)+a)>>aa);
  299   1          return c;
  300   1      
  301   1      }
  302          
  303          //========================================================================
  304          // ÂáΩÊï∞: void Magnetometer_measure()
  305          // ÊèèËø∞: ÊåáÂçóÈíàÊï∞ÊçÆÂ§ÑÁêÜ
  306          // ÂèÇÊï∞: 
  307          // ËøîÂõû: 
  308          // ÁâàÊú¨: V1.0 2023.02.05
  309          //========================================================================
  310          void Magnetometer_measure()
  311          {
  312   1      //    u8 a = 0;
  313   1          u16 c = 0;
  314   1          u16 b=0;
  315   1      
  316   1          IIC_W2bit(0x22,0x4C,0x02);//ÈááÊ†∑ÈÄüÂ∫¶10Hz,Ê≠£Â∏∏ÈááÊ†∑Ê®°Âºè
  317   1      
  318   1      
  319   1          Start(); //ÂèëÈÄÅËµ∑ÂßãÂëΩ‰ª§
  320   1          SendData(0x22);                         //ÂèëÈÄÅËÆæÂ§áÂú∞ÂùÄ+ÂÜôÂëΩ‰ª§
  321   1          DMABuffer[0] = RecvACK();
  322   1          SendData(0x42);                             //ÂèëÈÄÅËÆæÂ§áÂú∞ÂùÄ+ÂÜôÂëΩ‰ª§
C251 COMPILER V5.60.0,  BMC050                                                             25/04/24  01:27:43  PAGE 6   

  323   1          RecvACK();
  324   1          // Stop();
  325   1          Start(); //ÂèëÈÄÅËµ∑ÂßãÂëΩ‰ª§
  326   1          SendData(0x23);                         //ÂèëÈÄÅËÆæÂ§áÂú∞ÂùÄ+ÂÜôÂëΩ‰ª§
  327   1          RecvACK();
  328   1      
  329   1          dat00[0x0060] = Magnetometer_measure_1(3,1);
  330   1          dat00[0x0061] = Magnetometer_measure_1(3,1);
  331   1          dat00[0x0062] = Magnetometer_measure_1(1,1);
  332   1          dat00[0x0063] = Magnetometer_measure_1(2,0);
  333   1      
  334   1      
  335   1      
  336   1          dat00[0x0060] = (u16)convert_1(dat00[0x0060]);//ÁúãÂæóÊàëÊúâÁÇπËø∑ÊÉëÔºå‰ΩÜÊ≤°Êï¢Âä®
  337   1          dat00[0x0061] = (u16)convert_1(dat00[0x0061]);
  338   1      
  339   1      
  340   1      //Âπ≥ÂùáÂÄºÊª§Ê≥¢ÔºàÊïàÊûú‰∏çÊòØÂ§™Â•ΩÔºâ
  341   1          dat00_low[0x0060] = (u16)Get_Magnetism_dat(Magnetism_X,dat00[0x0060],7);
  342   1          dat00_low[0x0060] = (u16)Get_Magnetism_dat(Magnetism_X1,dat00_low[0x0060],7);
  343   1      
  344   1          dat00_low[0x0061] = (u16)Get_Magnetism_dat(Magnetism_Y,dat00[0x0061],7);
  345   1          dat00_low[0x0061] = (u16)Get_Magnetism_dat(Magnetism_Y1,dat00_low[0x0061],7);
  346   1      
  347   1      
  348   1      
  349   1          //Êõ¥Êñ∞Ê†°ÂáÜÂÄº
  350   1          if( (int)dat00[0x0060] > (int)dat00[0x0064])
  351   1          {
  352   2              dat00[0x0064] = dat00_low[0x0060];
  353   2          }
  354   1          if((int)dat00[0x0060] < (int)dat00_low[0x0064])
  355   1          {
  356   2              dat00_low[0x0064] = dat00_low[0x0060];
  357   2          }
  358   1          if( (int)dat00[0x0061] > (int)dat00[0x0065])
  359   1          {
  360   2              dat00[0x0065] = dat00_low[0x0061];
  361   2          }
  362   1          if((int)dat00[0x0061] < (int)dat00_low[0x0065])
  363   1          {
  364   2              dat00_low[0x0065] = dat00_low[0x0061];
  365   2          }
  366   1      
  367   1          //ËÆ°ÁÆóÊ†°ÂáÜ‰πãÂêéÁöÑÊï∞ÊçÆ
  368   1          dat00[0x0066] = (u16)(((int)dat00[0x0064] + (int)dat00_low[0x0064])/2);
  369   1          dat00_low[0x0066] = (u16)(((int)dat00[0x0065] + (int)dat00_low[0x0065])/2);
  370   1      
  371   1      
  372   1          dat00[0x0067] = (u16)(((int)dat00[0x0066] - (int)dat00_low[0x0060]));
  373   1          dat00_low[0x0067] = (u16)(((int)dat00_low[0x0066] - (int)dat00_low[0x0061]));
  374   1      
  375   1          Angle_calculation((int)dat00[0x0067],(int)dat00_low[0x0067]);
  376   1      
  377   1      
  378   1      }
  379          
  380          
  381          
  382          
  383          
  384          
  385          
  386          
  387          
  388          
C251 COMPILER V5.60.0,  BMC050                                                             25/04/24  01:27:43  PAGE 7   

  389          
  390          
  391          
  392          
  393          
  394          
  395          
  396          
  397          
  398          
  399          
  400          
  401          
  402          
  403          
  404          
  405          
  406          
  407          
  408          
  409          
  410          //========================================================================
  411          // ÂáΩÊï∞: void Magnetometer_falg_0080()
  412          // ÊèèËø∞: ÊåáÂçóÈíà‰ªªÂä°
  413          // ÂèÇÊï∞: 
  414          // ËøîÂõû: 
  415          // ÁâàÊú¨: V1.0 2023.02.05
  416          //========================================================================
  417          void Magnetometer_falg_0080()
  418          {
  419   1      
  420   1      
  421   1          if(Sleep_Queue_task[0] & 0x0080)
  422   1          {
  423   2              Sleep_Queue_task[0] &=~0x0080;
  424   2              if(dat00[0x10] == 0x0005)
  425   2              {
  426   3                  Magnetometer_measure();
  427   3                  UI_CompassMenu();
  428   3                  SleepQueue_aheadW1(250,0x0080,0);
  429   3              }
  430   2          }
  431   1      }
  432          
  433          
  434          
  435          
  436          
  437          
  438          
  439          
  440          
  441          
  442          
  443          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       981     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        79          8
C251 COMPILER V5.60.0,  BMC050                                                             25/04/24  01:27:43  PAGE 8   

  bit size             =    ------          3
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       111     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
