C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE DATA
OBJECT MODULE PLACED IN DATA.OBJ
COMPILER INVOKED BY: C:\Keil_v51\C251\BIN\C251.EXE DATA.c XSMALL OPTIMIZE(9,SPEED) BROWSE DEBUG TABS(2) 

stmt  level    source

    1          #include "DATA.h"
    2          #include "UI.h"
    3          #include "OLED.h"
    4          #include "time.h"
    5          #include "UART1.h"
    6          #include "INS5699S.h"
    7          #include "SleepMode.h"
    8          
    9          
   10          /****************************** 控制寄存器组 ***********************************/
   11          volatile u16 xdata dat00[System_data_num]=
   12          {
   13          //0程序系统参数
   14              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   15          
   16          //1UI光标寄存器组
   17              0,0,0,0,0x8000,0x8000,0,0x000A,0x000A,0,0,0,0,0,0,0,
   18          
   19          //2标准模式寄存器组
   20              6,1,40,10,10,10,0,0,0,0,0,0,0,0,0,0,
   21          
   22          //3休眠模式寄存器组
   23              6,1,10,10,10,10,0,0,0,0,0,0,0,0,0,0,
   24          
   25          //4环境信息寄存器组
   26              0x0007,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   27          
   28          //5亮度设置寄存器组
   29              0x0003,0x00FF,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   30          
   31          //6指南针寄存器组
   32              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   33          
   34          //7水平尺寄存器组
   35              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   36          
   37          //8时间设置寄存器组
   38              8,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
   39          
   40          //9闹钟寄存器组
   41              9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   42          
   43          //10增量闹钟寄存器组
   44              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   45          
   46          //11秒表寄存器组
   47              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   48          
   49          //12声音设置寄存器组
   50              0x0003,0,20,1,0,0,0,0,0,0,0,0,0,0,0,0,
   51          
   52          //13手电筒设置寄存器组
   53              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   54          
   55          //14电源管理寄存器组
   56              0x0006,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   57          
   58          //15系统设置寄存器组
   59              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 2   

   60          
   61          //16系统信息寄存器组
   62              0x000C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   63          
   64          //17工厂模式寄存器组
   65              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   66          
   67          };
   68          
   69          
   70          
   71          volatile u16 xdata dat00_low[System_data_num]=
   72          {
   73          //0程序系统参数
   74              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   75          
   76          //1UI光标寄存器组
   77              0,0,0,0,0x8000,0x8000,0,0x000A,0x000A,0,0,0,0,0,0,0,
   78          
   79          //2标准模式寄存器组
   80              6,1,40,10,10,10,0,0,0,0,0,0,0,0,0,0,
   81          
   82          //3休眠模式寄存器组
   83              6,1,10,10,10,10,0,0,0,0,0,0,0,0,0,0,
   84          
   85          //4环境信息寄存器组
   86              0x0007,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   87          
   88          //5亮度设置寄存器组
   89              0x0003,0x00FF,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   90          
   91          //6指南针寄存器组
   92              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   93          
   94          //7水平尺寄存器组
   95              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   96          
   97          //8时间设置寄存器组
   98              8,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
   99          
  100          //9闹钟寄存器组
  101              9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  102          
  103          //10增量闹钟寄存器组
  104              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  105          
  106          //11秒表寄存器组
  107              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  108          
  109          //12声音设置寄存器组
  110              0x0003,0,20,1,0,0,0,0,0,0,0,0,0,0,0,0,
  111          
  112          //13手电筒设置寄存器组
  113              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  114          
  115          //14电源管理寄存器组
  116              0x0006,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  117          
  118          //15系统设置寄存器组
  119              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  120          
  121          //16系统信息寄存器组
  122              0x000C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  123          
  124          //17工厂模式寄存器组
  125              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 3   

  126          
  127          };
  128          
  129          volatile u8 xdata dat00_flag[System_data_num]= {0};
  130          
  131          volatile u16 xdata dat00_max[System_data_num]=
  132          {
  133          //0程序系统参数
  134              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  135          
  136          //1UI光标寄存器组
  137              0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  138          
  139          //2标准模式寄存器组
  140              0XFF,0x1001,0x110C,0x1103,0x1103,0x1103,0xFF,0,0,0,0,0,0,0,0,0,
  141          
  142          //3休眠模式寄存器组
  143              0XFF,0x1001,0x110C,0x1103,0x1103,0x1103,0xFF,0,0,0,0,0,0,0,0,0,
  144          
  145          //4环境信息寄存器组
  146              0XFF,0xA38D,0x948D,0x378D,0x2C8D,0x2C8D,0x2C8D,0x2C8D,0,0,0,0,0,0,0,0,
  147          
  148          //5亮度设置寄存器组
  149              0XFF,0x0A,0x0B,1,0,0,0,0,0,0,0,0,0,0,0,0,
  150          
  151          //6指南针寄存器组
  152              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  153          
  154          //7水平尺寄存器组
  155              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  156          
  157          //8时间设置寄存器组
  158              0xff,0x00ff,0x000F,0x000F,0x000E,0x0010,0x0012,0x0011,0x0013,0x1001,0x1001,0x1001,0x1103,0,0,0,
  159          
  160          //9闹钟寄存器组
  161              0xff,0x000F,0x000F,0x000E,0x0012,0x0011,0x1001,0x1001,0x1103,0x1001,0,0,0,0,0,0,
  162          
  163          //10增量闹钟寄存器组
  164              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  165          
  166          //11秒表寄存器组
  167              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  168          
  169          //12声音设置寄存器组
  170              0XFF,1,0x210C,1,0,0,0,0,0,0,0,0,0,0,0,0,
  171          
  172          //13手电筒设置寄存器组
  173              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  174          
  175          //14电源管理寄存器组
  176              0xFF,0x0081,0x0081,0xDA8D,0x298D,0x548D,0x0001,0,0,0,0,0,0,0,0,0,
  177          
  178          //15系统设置寄存器组
  179              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  180          
  181          //16系统信息寄存器组
  182              0XFF,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  183          
  184          //17工厂模式寄存器组
  185              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  186          
  187          };
  188          //最大值寄存器：
  189          //0:0~0xffff
  190          //1:0~1
  191          //2:0~10
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 4   

  192          //3:0~100
  193          //4:0~1000
  194          //5:0~10000
  195          //6:0~0xff
  196          //7:0~0x80
  197          //8:0~0x7F
  198          //9:0~UI_main_branchnum 主菜单分支数-1
  199          //10:1~0xFF
  200          //11:0~3
  201          //12:1~100
  202          //13:0~0xFFFF
  203          //14:0~23
  204          //15:0~59
  205          //16:0~6
  206          //17:1~11
  207          //18:1~31
  208          //19:0~99
  209          //20:1~100
  210          
  211          //7bit=1:不可修改
  212          //6bit=1:不显示数值
  213          
  214          
  215          
  216          
  217          
  218          
  219          
  220          
  221          
  222          /****************************** UI图形缓冲存器组 ***********************************/
  223          u8  UI_dat[8][16] = {0};
  224          
  225          u8  UI_TX[3][64] = {0};
  226          
  227          
  228          
  229          /****************************** 睡眠寄存器组 ***********************************/
  230          u16  Sleep_Queue[Sleep_queue_num]= {0};
  231          u16  Sleep_Queue_count = 0;
  232          u16  Sleep_Queue_count_target = 0;
  233          
  234          
  235          
  236          u16  Sleep_Queue_task[Sleep_queue_num]= {0};
  237          
  238          
  239          
  240          /****************************** 时间寄存器组 ***********************************/
  241          //年 月 日 周 时 分 秒
  242          u8 xdata Time_New[7] = {0};
  243          u8 xdata Time_Low[7] = {0};
  244          //u8 xdata Time_int[7] = {0x50,0x30,0x09,0x01,0x27,0x02,0x23};
  245          u8 xdata Time_int[7] = {0x50,0x59,0x23,0x01,0x31,0x01,0x23};
  246          
  247          
  248          /****************************** 闹钟存器组 ***********************************/
  249          
  250          //volatile u16 xdata AlarmClock_max[16]={0xff,0x00ff,0x000F,0x000F,0x0011,0x0010,0x0012,0x0011,0x0013,0,0
             -,0,0,0,0,0};
  251          
  252          
  253          //u16 AlarmClock_SET[16]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  254          u32 AlarmClock[16]={0x02100000,0x02100000,0x02100000,0x02100000,0x02100000,0x02100000,0x02100000,0x021000
             -00,0x02100000,0x02100000,0,0,0,0,0,0};
  255          
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 5   

  256          
  257          void Array_Initialization_8(u8 *array_name,u16 array_num)
  258          {
  259   1          u16 i=0;
  260   1          for(i=0;i<array_num;i++)
  261   1          {
  262   2              array_name[i]=0;
  263   2          }
  264   1      }
  265          
  266          void Array_Initialization_16(u16 *array_name,u16 array_num)
  267          {
  268   1          u16 i=0;
  269   1          for(i=0;i<array_num;i++)
  270   1          {
  271   2              array_name[i]=0;
  272   2          }
  273   1      }
  274          
  275          
  276          void Array_Initialization_()
  277          {
  278   1        Array_Initialization_16(Sleep_Queue,Sleep_queue_num);
  279   1        Array_Initialization_16(Sleep_Queue_task,Sleep_queue_num);
  280   1        Array_Initialization_8(Time_Low,7);
  281   1        Array_Initialization_8(Time_New,7);
  282   1        Array_Initialization_8(dat00_flag,System_data_num);
  283   1      }
  284          
  285          
  286          
  287          
  288          
  289          
  290          
  291          void array_fill(u16 *array_name,u16 array_num,u16 array_dat,u8 w)
  292          {
  293   1          u8 j = 0;
  294   1          array_num = array_num + w;
  295   1          for(j=w; j<array_num; j++)
  296   1          {
  297   2              array_name[j]=array_dat;
  298   2          }
  299   1      }
  300          
  301          u8 RFF()
  302          {
  303   1          u8 i = 0;
  304   1          u8 b = 0;
  305   1          u8 a = 0;
  306   1          for(i = 7; i<Sleep_queue_num; i = i + 8)
  307   1          {
  308   2              if(Sleep_Queue[i] == 0)
  309   2              {
  310   3                  b = i;
  311   3                  i = 200;
  312   3              }
  313   2          }
  314   1      
  315   1          for(i = b-7; i<=b; i++)
  316   1          {
  317   2              if(Sleep_Queue[i] == 0)
  318   2              {
  319   3                  a = i;
  320   3                  i = 200;
  321   3              }
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 6   

  322   2          }
  323   1          return a;
  324   1      
  325   1      }
  326          
  327          
  328          void SleepQueue_MoveLeft(u8 p)
  329          {
  330   1          u8 j = 0;
  331   1          u8 h =0;
  332   1          h = RFF();
  333   1          for(j=0; j<h; j++)
  334   1          {
  335   2              Sleep_Queue[j]=Sleep_Queue[j+p];
  336   2              Sleep_Queue_task[j]=Sleep_Queue_task[j+p];
  337   2          }
  338   1          Sleep_Queue[h]=0;
  339   1          Sleep_Queue_task[h]=0;
  340   1      }
  341          
  342          void SleepQueue_MoveLeft2()
  343          {
  344   1          u8 j = 0;
  345   1          u8 h =0;
  346   1          h = Sleep_queue_num -2;
  347   1          for(j=0; j<h; j++)
  348   1          {
  349   2              Sleep_Queue[j]=Sleep_Queue[j+1];
  350   2              Sleep_Queue_task[j]=Sleep_Queue_task[j+1];
  351   2          }
  352   1          Sleep_Queue[h]=0;
  353   1          Sleep_Queue_task[h]=0;
  354   1      }
  355          
  356          
  357          
  358          
  359          
  360          
  361          void SleepQueue_behindW(u16 time,u16 num)
  362          {
  363   1          u8 j = 0;
  364   1          j = RFF();
  365   1      
  366   1          Sleep_Queue[j]=time;
  367   1          Sleep_Queue_task[j]=num;
  368   1      
  369   1      }
  370          
  371          
  372          
  373          void SleepQueue_aheadW1(u16 time,u16 num,u8 f)
  374          {
  375   1          u8 i = 0;
  376   1          u8 k = 0;
  377   1          u16 j = 0;
  378   1          for(i=f; i<Sleep_queue_num; i++)
  379   1          {
  380   2              j = j + Sleep_Queue[i];
  381   2      
  382   2      
  383   2              if(Sleep_Queue[i] != 0 && time < j)
  384   2              {
  385   3                  for(k= RFF(); k>i; k--)
  386   3                  {
  387   4                      Sleep_Queue[k]=Sleep_Queue[k-1];
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 7   

  388   4                      Sleep_Queue_task[k]  = Sleep_Queue_task[k-1];
  389   4                  }
  390   3                  Sleep_Queue[i] = time - ( j - Sleep_Queue[i+1]);
  391   3                  Sleep_Queue_task[i]  = num;
  392   3                  Sleep_Queue[i+1] = Sleep_Queue[i+1] - Sleep_Queue[i];
  393   3                  i  = 200;
  394   3              }
  395   2              else if(Sleep_Queue[i] != 0 && time == j)
  396   2              {
  397   3                  Sleep_Queue_task[i]  |= num;
  398   3                  i  = 200;
  399   3              }
  400   2              else if(Sleep_Queue[i] == 0)
  401   2              {
  402   3                  Sleep_Queue[i] = time - j;
  403   3                  Sleep_Queue_task[i]  = num;
  404   3                  i  = 200;
  405   3              }
  406   2          }
  407   1      }
  408          
  409          
  410          void fast_SleepQueue_aheadW1(u16 dat,u16 task,u8 num)
  411          {
  412   1          u8 a =0;
  413   1          u8 i =0;
  414   1          u16 j =0;
  415   1          a = RFF();//获得数组有数值的长度
  416   1          if(a == 0)
  417   1          {
  418   2              array_fill(Sleep_Queue,num,dat,0);
  419   2              array_fill(Sleep_Queue_task,num,task,0);
  420   2          }
  421   1          else
  422   1          {
  423   2              array_fill(Sleep_Queue,num,dat,a);
  424   2              array_fill(Sleep_Queue_task,num,task,a);
  425   2              for(i = 0; i < a; i++) //共处理 n 个数据
  426   2              {
  427   3                  j = j + Sleep_Queue[i];
  428   3                  SleepQueue_aheadW1(j,Sleep_Queue_task[i],a);
  429   3              }
  430   2          }
  431   1          if(a) SleepQueue_MoveLeft(a);
  432   1      }
  433          
  434          void fast_SleepQueue_aheadW2()
  435          {
  436   1          u8 i =0;
  437   1          for(i = 0; i < 48; i++) //共处理 n 个数据
  438   1          {
  439   2              SleepQueue_aheadW1(99,1,0);
  440   2          }
  441   1      }
  442          
  443          u16 data_GetMax(u16 dat)
  444          {
  445   1          u16 k =0;
  446   1          dat = dat00_max[dat]; 
  447   1          dat &= 0x003F;
  448   1          switch (dat)
  449   1          {
  450   2          case 0x00 :
  451   2              k=0xffff;
  452   2              break;
  453   2          case 0x01 :
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 8   

  454   2              k=1;
  455   2              break;
  456   2          case 0x02 :
  457   2              k=10;
  458   2              break;
  459   2          case 0x03 :
  460   2              k=100;
  461   2              break;
  462   2          case 0x04 :
  463   2              k=1000;
  464   2              break;
  465   2          case 0x05 :
  466   2              k=10000;
  467   2              break;
  468   2          case 0x06 :
  469   2              k=0xff;
  470   2              break;
  471   2          case 0x07 :
  472   2              k=0x80;
  473   2              break;
  474   2          case 0x08 :
  475   2              k=0x7f;
  476   2              break;
  477   2          case 0x09 :
  478   2              k=UI_main_branchnum;
  479   2              break;
  480   2          case 0x0A :
  481   2              k=0xff;
  482   2              break;
  483   2          case 0x0B :
  484   2              k=0x03;
  485   2              break;
  486   2          case 0x0C :
  487   2              k=100;
  488   2              break;
  489   2          case 0x0D :
  490   2              k=0xFFFF;
  491   2              break;
  492   2          case 0x0E :
  493   2              k=0x0017;
  494   2              break;
  495   2          case 0x0F :
  496   2              k=0x003B;
  497   2              break;
  498   2          case 0x10 :
  499   2              k=0x0006;
  500   2              break;
  501   2          case 0x11 :
  502   2              k=0x000B;
  503   2              break;
  504   2          case 0x12 :
  505   2              k=0x001F;
  506   2              break;
  507   2          case 0x13 :
  508   2              k=99;
  509   2              break;
  510   2          case 0x14 :
  511   2              k=100;
  512   2              break;
  513   2          case 0xFF :
  514   2              k=0;
  515   2              break;
  516   2          default:
  517   2              k=0;
  518   2              break;
  519   2      //**********************************************
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 9   

  520   2          }
  521   1          return k;
  522   1      }
  523          
  524          u16 data_GetMin(u16 dat)
  525          {
  526   1          u16 k =0;
  527   1          dat = dat00_max[dat]; 
  528   1          dat &= 0x003F;
  529   1        
  530   1        
  531   1          if(dat == 0x0A | dat == 0x0C | dat == 0x11 |dat == 0x12 |dat == 0x14)
  532   1          {
  533   2             k=1; 
  534   2          }
  535   1          return k;
  536   1      
  537   1      }
  538          
  539          void data00_Change(u16 address,u16 add)
  540          {
  541   1          if(add)
  542   1          {
  543   2              if(dat00[address] == data_GetMax(address))
  544   2              {
  545   3                  dat00[address] = data_GetMin(address);
  546   3              }
  547   2              else
  548   2              {
  549   3                  dat00[address]++;
  550   3              }
  551   2          }
  552   1          else
  553   1          {
  554   2              if(dat00[address] == data_GetMin(address))
  555   2              {
  556   3                  dat00[address] = data_GetMax(address);
  557   3              }
  558   2              else
  559   2              {
  560   3                  dat00[address]--;
  561   3              }
  562   2      
  563   2          }
  564   1          dat00_flag[address] = 1;
  565   1      }
  566          
  567          
  568          
  569          
  570          
  571          u16 GET_SC()  //获取目前是调用0x0?0组标号
  572          {
  573   1          u16 dat =0;
  574   1          dat = (dat00[0x10] + 1) * 16;
  575   1          return dat;
  576   1      }
  577          
  578          u16 GET_SCdat() //获取目前是调用0x0?0组 的值（当前组寄存器个数）
  579          {
  580   1          return dat00[GET_SC()];
  581   1      }
  582          
  583          
  584          u16 GET_GBdat()   //获取目前是调用0x0?0组 的光标 的值
  585          {
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 10  

  586   1          return dat00[GET_SC() + 0x0f];
  587   1      }
  588          
  589          u16 GET_SCdat3() //获取目前是调用0x0?0组 的 指向
  590          {
  591   1          return GET_GBdat() + 1 + GET_SC();
  592   1      }
  593          
  594          
  595          
  596          
  597          void dat00_Change()
  598          {
  599   1          if(dat00_flag[0x14] == 0x01)//主菜单界面移动触发
  600   1          {
  601   2              dat00[0x11] = dat00[0x14] % 16;
  602   2              dat00_flag[0x14]  = 0;
  603   2          }
  604   1          if(dat00_flag[0x17] == 0x01)//
  605   1          {
  606   2              dat00[GET_SC() + 0x000f] = dat00[0x17] % GET_SCdat();
  607   2              dat00_flag[0x17]  = 0;
  608   2          }
  609   1          if(dat00_flag[0x81] == 0x01)
  610   1          {
  611   2           SET_time_c();
  612   2           INS5699_timeW(Time_int);
  613   2           dat00_flag[0x81] = 0;
  614   2          }
  615   1          if(dat00_flag[0x36] == 0x01)
  616   1          {
  617   2            SleepMode_ON();
  618   2      
  619   2            SleepMode_OFF();
  620   2           dat00_flag[0x36] = 0;
  621   2          }   
  622   1          
  623   1          
  624   1          
  625   1          
  626   1          
  627   1          
  628   1          
  629   1      }
  630          
  631          
  632          
  633          
  634          u8 BCD_to_X10(u8 a)
  635          {
  636   1          a = (a / 16)*10 +(a%16);
  637   1          return a;
  638   1      }
  639          
  640          
  641          u8 X10_to_BCD(u16 a)
  642          {
  643   1          a = (a / 10)*16 + (a%10);
  644   1          return (u8)a;
  645   1      }
  646          
  647          u8 GET_WEEK(u8 a)
  648          {
  649   1          u8 i=0;
  650   1          u8 b=0x01;
  651   1          for(i=0; i<8; i++)
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 11  

  652   1          {
  653   2              if(a == b) break;
  654   2              b = b <<1;
  655   2          }
  656   1      
  657   1          return i;
  658   1      }
  659          
  660          u8 SET_WEEK(u16 a)
  661          {
  662   1          u8 i=0;
  663   1          u8 b=0x01;
  664   1          
  665   1          for(i=0; i<a; i++)
  666   1          {
  667   2              b = b <<1;
  668   2          }
  669   1      
  670   1          return b;
  671   1      }
  672          
  673          
  674          
  675          
  676          
  677          void GET_time_c()
  678          {
  679   1          u8 i = 0;
  680   1          dat00[0x0082] = BCD_to_X10(Time_New[0]);
  681   1          dat00[0x0083] = BCD_to_X10(Time_New[1]);
  682   1          dat00[0x0084] = BCD_to_X10(Time_New[2]);
  683   1          dat00[0x0086] = BCD_to_X10(Time_New[4]);
  684   1          dat00[0x0087] = BCD_to_X10(Time_New[5]);
  685   1          dat00[0x0088] = BCD_to_X10(Time_New[6]);
  686   1          dat00[0x0085] = GET_WEEK(Time_New[3]);
  687   1          for(i=0;i<7;i++)
  688   1          {
  689   2            dat00_low[0x0082+i] = dat00[0x0082+i];
  690   2          }   
  691   1      }
  692          
  693          
  694          void SET_time_c()
  695          {
  696   1          Time_int[0] = X10_to_BCD(dat00[0x0082]);
  697   1          Time_int[1] = X10_to_BCD(dat00[0x0083]);
  698   1          Time_int[2] = X10_to_BCD(dat00[0x0084]);
  699   1          Time_int[3] = SET_WEEK(dat00[0x0085]);
  700   1          Time_int[4] = X10_to_BCD(dat00[0x0086]);
  701   1          Time_int[5] = X10_to_BCD(dat00[0x0087]);
  702   1          Time_int[6] = X10_to_BCD(dat00[0x0088]);
  703   1          //dat00[0x0084] = GET_WEEK(Time_New[3]);
  704   1      }
  705          
  706          
  707          bit Judging_Range(u16 a,u16 b, u16 c)
  708          {
  709   1          int a1 = (int)a;
  710   1          int b1 = (int)b;
  711   1          int c1 = (int)c; 
  712   1          
  713   1          if(a >(b+c) || a <(b-c))
  714   1          {
  715   2            return 0; 
  716   2          }
  717   1          else
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 12  

  718   1          {
  719   2            return 1; 
  720   2          } 
  721   1      }
  722          
  723          u16 Abs_Difference_16(u16 a,u16 b)
  724          {
  725   1          if(a>b)
  726   1          {
  727   2            b = a - b;
  728   2          }
  729   1          else
  730   1          {
  731   2            b = b - a;
  732   2          }
  733   1          return b;
  734   1      }
  735          
  736          
  737          void Alarm_conversion_16TO32(u8 a)
  738          {
  739   1          u32 dat = 0;
  740   1          u8 b =0;
  741   1          u8 c =0;
  742   1        
  743   1        
  744   1          dat = (u32)dat00[0x0095];   
  745   1        
  746   1          dat = dat<<5;
  747   1          dat = dat | (u32)dat00[0x0094];
  748   1        
  749   1          dat = dat<<5;    
  750   1          dat = dat | (u32)dat00[0x0093];  
  751   1        
  752   1          dat = dat<<6;    
  753   1          dat = dat | (u32)dat00[0x0092];  
  754   1      
  755   1          dat = dat<<6;    
  756   1          dat = dat | (u32)dat00[0x0091];  
  757   1      
  758   1          dat = dat<<1;    
  759   1          dat = dat | (u32)dat00[0x0096];  
  760   1        
  761   1          dat = dat<<1;    
  762   1          dat = dat | (u32)dat00[0x0097];   
  763   1        
  764   1          dat = dat<<1;    
  765   1          dat = dat | (u32)dat00[0x0099]; 
  766   1      
  767   1          AlarmClock[a] = dat;
  768   1          
  769   1          
  770   1          b=a/4 + 10; 
  771   1          c = (a % 4)*8;
  772   1          dat = 0xff;
  773   1          dat = dat<<c;
  774   1          dat = ~dat;
  775   1          AlarmClock[b] = AlarmClock[b] & dat;
  776   1          dat = ((u32)dat00[0x0098])<<c;
  777   1          AlarmClock[b] = AlarmClock[b] | dat;
  778   1      
  779   1          
  780   1      }
  781          
  782          
  783          
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 13  

  784          void Alarm_conversion_32TO16(u8 a)
  785          {
  786   1          u32 dat = 0;
  787   1          u8 b =0;
  788   1          u8 c =0;
  789   1        
  790   1        
  791   1          dat = AlarmClock[a];
  792   1        
  793   1          
  794   1        
  795   1          dat00[0x0099] = (dat & 0x00000001); 
  796   1          dat = dat>>1;
  797   1        
  798   1          dat00[0x0097] = (dat & 0x00000001);   
  799   1          dat = dat>>1;
  800   1        
  801   1        
  802   1          dat00[0x0096] = (dat & 0x00000001);   
  803   1          dat = dat>>1;
  804   1        
  805   1        
  806   1          dat00[0x0091] = (dat & 0x0000003F);   
  807   1          dat = dat>>6;
  808   1          
  809   1          dat00[0x0092] = (dat & 0x0000003F);   
  810   1          dat = dat>>6;
  811   1          
  812   1          
  813   1          dat00[0x0093] = (dat & 0x0000001F);   
  814   1          dat = dat>>5;
  815   1          
  816   1          
  817   1          dat00[0x0094] = (dat & 0x0000001F);   
  818   1          dat = dat>>5;
  819   1          
  820   1          
  821   1          dat00[0x0095] = (dat & 0x0000000F); 
  822   1          
  823   1          
  824   1          b=a/4 + 10;   
  825   1          c = (a % 4)*8;
  826   1          dat = 0xff;
  827   1          dat = dat<<c;
  828   1          dat = AlarmClock[b] & dat;
  829   1          dat = dat>>c;
  830   1          dat00[0x0098] = dat;
  831   1      
  832   1          
  833   1      }
  834          
  835          
  836          
  837          
  838          
  839          
  840          
  841          
  842          
  843          
  844          
  845          
  846          
  847          
  848          
  849          
C251 COMPILER V5.60.0,  DATA                                                               24/01/24  00:35:52  PAGE 14  

  850          
  851          
  852          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2367     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =      2037     ------
  xdata-const size     =    ------     ------
  edata size           =       772          8
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =      2872     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
