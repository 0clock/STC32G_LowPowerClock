C251 COMPILER V5.60.0,  ADC                                                                24/01/24  00:35:51  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN ADC.OBJ
COMPILER INVOKED BY: C:\Keil_v51\C251\BIN\C251.EXE ADC.c XSMALL OPTIMIZE(9,SPEED) BROWSE DEBUG TABS(2) 

stmt  level    source

    1          #include "ADC.h"
    2          #include "time.h"
    3          #include "IO.h"
    4          #include "DATA.h"
    5          #include "UART1.h"
    6          #include "OLED.h"
    7          
    8          extern u16 xdata dat00[System_data_num];
    9          extern u16 xdata dat00_low[System_data_num];
   10          
   11          extern u16 Sleep_Queue_task[Sleep_queue_num];
   12          
   13          
   14          u32 adc_rtf = 0;
   15          
   16          u16 BV[8];
   17          
   18          u8 pp=0;
   19          
   20          
   21          
   22          
   23          void VB_SET(u16 dat)
   24          {
   25   1        u8 i =0;
   26   1        for(i=0;i<8;i++)
   27   1        {
   28   2           BV[i] = dat;
   29   2        }
   30   1      }
   31          
   32          
   33          
   34          u16 Get_VB() 
   35          {
   36   1        u32 adc_dat = 0;
   37   1        u8 i = 0;
   38   1        Battery_ON_ON();
   39   1        adc_rtf = Get_ADC12bitResult(15);
   40   1        adc_rtf = Get_ADC12bitResult(15);
   41   1        for(i=0;i<4;i++)
   42   1        {
   43   2            adc_dat = Get_ADC12bitResult(0x0C);       
   44   2        }
   45   1        Battery_ON_OFF();
   46   1        adc_dat = (adc_dat<<16);
   47   1        adc_dat = (adc_dat/adc_rtf*1240)>>15;
   48   1        return  (u16)adc_dat;
   49   1      }
   50          
   51          
   52          u16 Get_VB_Average(u16 dat) 
   53          {
   54   1        u16 adc_dat = 0;
   55   1        u8 i = 0;
   56   1        for(i=0;i<7;i++)
   57   1        {
   58   2           BV[i] = BV[i+1];
   59   2        }
C251 COMPILER V5.60.0,  ADC                                                                24/01/24  00:35:51  PAGE 2   

   60   1        BV[7] = dat;
   61   1        for(i=0;i<8;i++)
   62   1        {
   63   2           adc_dat += BV[i];
   64   2        } 
   65   1        adc_dat = adc_dat>>3;
   66   1        
   67   1        return  adc_dat;
   68   1      }
   69          
   70          
   71          
   72          
   73          
   74          
   75          void ADC_init()
   76          {
   77   1          ADCEXCFG = 0x02;  //设置转换次数
   78   1          ADCTIM = 0x3f;    //设置 ADC 内部时序，ADC采样时间建议设最大值
   79   1          ADCCFG = 0x22;    //设置 ADC 时钟为系统时钟/2/16/16
   80   1          //ADC_CONTR = 0x80;
   81   1          //ADC_POWER=1;      //ADC电源打开
   82   1        
   83   1          ADC_CONTR = 0x80;
   84   1          delay_ms(2);
   85   1          VB_SET(Get_VB());
   86   1          _nop_();
   87   1          ADC_CONTR = 0;
   88   1          _nop_();
   89   1        
   90   1      }
   91          
   92          u16 Get_ADC12bitResult(u8 channel) // channel = 0~15  0~7  P10~P17  8~14 P00~P06 15内部参考源
   93          {
   94   1          u16 i = 100;
   95   1          ADC_RES = 0;
   96   1          ADC_RESL = 0;
   97   1          ADC_CONTR = 0x80 + channel;
   98   1          ADC_START = 1;//启动转换
   99   1        
  100   1          while((ADC_FLAG == 0) && (i--));   //等待ADC完成
  101   1          ADC_FLAG = 0;     //清除中断
  102   1          return  (((u16)ADC_RES << 8) | ADC_RESL);
  103   1      }
  104          
  105          
  106          
  107          
  108          void ADC_Get_V1()
  109          {
  110   1      //    u32 adc_rtf = 0;
  111   1      //    u32 adc_dat = 0;
  112   1      //    dat00[0x00E1] = P00;
  113   1      //    Battery_ON_ON();
  114   1      //    adc_rtf = Get_ADC12bitResult(15);
  115   1      //    adc_dat = Get_ADC12bitResult(0x0C);
  116   1      //    Battery_ON_OFF();
  117   1      //    adc_dat = (adc_dat<<16);
  118   1      //    adc_dat = (adc_dat/adc_rtf*1193)>>15;
  119   1      //    dat00[0x00E3] = adc_dat;
  120   1      //    if(dat00[0x00E1])
  121   1      //    {
  122   1      //      adc_dat = Get_ADC12bitResult(0x0B);
  123   1      //      adc_dat = (adc_dat<<16);
  124   1      //      adc_dat = (((adc_dat/adc_rtf*1193)/25)*10)>>16;
  125   1      //      dat00[0x00E4] = adc_dat;
C251 COMPILER V5.60.0,  ADC                                                                24/01/24  00:35:51  PAGE 3   

  126   1      //    }
  127   1      //      Battery_percentage(dat00[0x00E3]);
  128   1      //     ADC_CONTR = 0;
  129   1          if(P00)
  130   1          {
  131   2              
  132   2              if(dat00_low[0x00E2]>0)
  133   2              {
  134   3                  dat00[0x00E2] = 0;
  135   3              }
  136   2              else
  137   2              {
  138   3                  dat00[0x00E2] = 1;
  139   3              }
  140   2              dat00_low[0x00E2] = 0;
  141   2              P0INTE |= 0x02;//允许端口中断
  142   2              P0IM1 |=  0xFD;//下降沿中断
  143   2              P0IM0 &=  0xFD;
  144   2              P0WKUE |= 0x02;//允许掉电唤醒
  145   2          }
  146   1          else
  147   1          {
  148   2              dat00[0x00E2] = 1;
  149   2          }
  150   1          ADC_CONTR = 0x80;
  151   1      
  152   1          SleepQueue_aheadW1(16,0x0040,0);
  153   1      
  154   1      
  155   1      }
  156          
  157          /*
  158          100%----4.20V
  159          90%-----4.06V
  160          80%-----3.98V
  161          70%-----3.92V
  162          60%-----3.87V
  163          50%-----3.82V
  164          40%-----3.79V
  165          30%-----3.77V
  166          20%-----3.74V
  167          10%-----3.68V
  168          5%------3.45V
  169          0%------3.00V
  170          */
  171          
  172          
  173          
  174          
  175          
  176          
  177          
  178          void Battery_percentage(u32 a)
  179          {
  180   1          u16 b = 0;
  181   1          a = a*100;
  182   1      
  183   1          if(a>=417900)
  184   1          {
  185   2              b = 1000;
  186   2          }
  187   1          else if(a >= 406300)
  188   1          {
  189   2              b = 900 + (a - 406300)/116;
  190   2          }
  191   1          else if(a >= 394900)
C251 COMPILER V5.60.0,  ADC                                                                24/01/24  00:35:51  PAGE 4   

  192   1          {
  193   2              b = 800 + (a - 394900)/114;
  194   2          }
  195   1          else if(a >= 384500)
  196   1          {
  197   2              b = 700 + (a - 384500)/104;
  198   2          }
  199   1          else if(a >= 376000)
  200   1          {
  201   2              b = 600 + (a - 376000)/85;
  202   2          }
  203   1          else if(a >= 369500)
  204   1          {
  205   2              b = 500 + (a - 369500)/65;
  206   2          }
  207   1          else if(a >= 364800)
  208   1          {
  209   2              b = 400 + (a - 364800)/47;
  210   2          }
  211   1          else if(a >= 361300)
  212   1          {
  213   2              b = 300 + (a - 361300)/35;
  214   2          }
  215   1          else if(a >= 357600)
  216   1          {
  217   2              b = 200 + (a - 357600)/37;
  218   2          }
  219   1          else if(a >= 352100)
  220   1          {
  221   2              b = 100 + (a - 352100)/55;
  222   2          }
  223   1          else if(a >= 348000)
  224   1          {
  225   2              b = 50 + (a - 348000)/41;
  226   2          }
  227   1          else if(a >= 342600)
  228   1          {
  229   2              b = (a - 342600)/54;
  230   2          }
  231   1          else
  232   1          {
  233   2              b = 0;
  234   2          }
  235   1          dat00[0x00E5] = b;
  236   1          if(!P00)
  237   1          {
  238   2            if(dat00[0x00E5] > (dat00_low[0x00E5] + 10) | dat00[0x00E5] < dat00_low[0x00E5])
  239   2              {
  240   3                  dat00_low[0x00E5] = dat00[0x00E5];
  241   3              }
  242   2              else
  243   2              {
  244   3                  dat00[0x00E5] = dat00_low[0x00E5];
  245   3              }
  246   2          }
  247   1      }
  248          
  249          void ADC_falg_0040()
  250          {
  251   1          u32 adc_dat = 0;
  252   1          if(Sleep_Queue_task[0] & 0x0040)
  253   1          {
  254   2              dat00_low[0x00E1] = dat00[0x00E1];
  255   2              dat00[0x00E1] = P00;
  256   2              
  257   2              adc_dat = Get_VB();
C251 COMPILER V5.60.0,  ADC                                                                24/01/24  00:35:51  PAGE 5   

  258   2            
  259   2              if(adc_dat > (dat00[0x00E3]+200) || (adc_dat+200) < dat00[0x00E3] )
  260   2              { 
  261   3                  VB_SET((u16)adc_dat);
  262   3              }
  263   2              else
  264   2              {
  265   3                   adc_dat = Get_VB_Average((u16)adc_dat);
  266   3              }
  267   2      //        //miao(pp++);
  268   2                  
  269   2            
  270   2              dat00[0x00E3] = adc_dat; 
  271   2              if(dat00[0x00E1])
  272   2              {
  273   3                  adc_dat = Get_ADC12bitResult(0x0B);
  274   3                  adc_dat = (adc_dat<<16);
  275   3                  adc_dat = (((adc_dat/adc_rtf*1193)/25)*10)>>16;
  276   3                  dat00[0x00E4] = adc_dat;
  277   3              }
  278   2              else
  279   2              {
  280   3                dat00[0x00E4] = 0;
  281   3              }
  282   2              Battery_percentage(dat00[0x00E3]);
  283   2              ADC_CONTR = 0;
  284   2              Sleep_Queue_task[0] &=~0x0040;
  285   2          }
  286   1      }
  287          
  288          
  289          
  290          
  291          //void ADC_Isr() interrupt 5
  292          //{
  293          //    ADC_FLAG = 0;
  294          //}
  295          
  296          
  297          
  298          
  299          
  300          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1062     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        21          1
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        13     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
