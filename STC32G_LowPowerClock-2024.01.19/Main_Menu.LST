C251 COMPILER V5.60.0,  Main_Menu                                                          24/04/24  23:59:19  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Main_Menu
OBJECT MODULE PLACED IN ..\firmware\Main_Menu.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Main_Menu.c XSMALL OPTIMIZE(9,SPEED) BROWSE DEBUG TABS(2) OBJECT(..\fi
                    -rmware\Main_Menu.obj) 

stmt  level    source

    1          #include "Main_Menu.h"
    2          #include "OLED.h"
    3          #include "DATA.h"
    4          
    5          extern u16 xdata dat00[System_data_num];
    6          extern u16 xdata dat00_low[System_data_num];
    7          extern u8 xdata dat00_flag[System_data_num];
    8          
    9          
   10          /****************************** 睡眠寄存器组 ***********************************/
   11          extern u16 Sleep_Queue[Sleep_queue_num];
   12          extern u16 Sleep_Queue_count;
   13          extern u16 Sleep_Queue_count_target;
   14          extern u16 Sleep_Queue_task[Sleep_queue_num];
   15          
   16          //******************************************************************************
   17          //
   18          //    显示主界面
   19          //
   20          //******************************************************************************
   21          void UI_main(u8 num1)
   22          {
   23   1          u8 num = 0;
   24   1          u8 yyy = 0;
   25   1          yyy = (u8)(49-dat00[0x12]);
   26   1          if(dat00[0x13] == 0x0000) yyy = 0;
   27   1        if(num1)
   28   1        {
   29   2          
   30   2          OLED_32X32(0,0,(u8)((dat00_low[0x14] - 1) % 16),yyy,32);  
   31   2          OLED_32X32((u8)(48-yyy),0,(u8)(dat00_low[0x14] % 16),0,32);
   32   2          OLED_32X32((u8)(96-yyy),0,(u8)((dat00_low[0x14] + 1) % 16),0,32);
   33   2          OLED_32X32((u8)(144-yyy),0,(u8)((dat00_low[0x14] + 2) % 16),0,(u8)(yyy-16));
   34   2        }
   35   1        else
   36   1        {
   37   2          OLED_32X32(0,0,(u8)((dat00_low[0x14] - 2) % 16),(u8)(47-yyy),32); 
   38   2          OLED_32X32(yyy,0,(u8)((dat00_low[0x14] - 1) % 16),0,32);
   39   2          OLED_32X32((u8)(48 + yyy),0,(u8)(dat00_low[0x14] % 16),0,32);
   40   2          OLED_32X32((u8)(96+yyy),0,(u8)((dat00_low[0x14] + 1) % 16),0,(u8)(32-yyy));   
   41   2        }
   42   1          if(dat00[0x12] == dat00[0x13])
   43   1          {
   44   2          num = (u8)((dat00[0x11] % 16)<<2);
   45   2          OLED_16X16(32,5,num);
   46   2          OLED_16X16(48,5,(u8)(num+1));
   47   2          OLED_16X16(64,5,(u8)(num+2));
   48   2          OLED_16X16(80,5,(u8)(num+3));   
   49   2          }
   50   1      }
   51          
   52          
   53          void IU_Main_Menu()
   54          {
   55   1        if(dat00[0x10] == 0x0000 && dat00[0x1A] == 0)
   56   1        {
   57   2          if(dat00[0x14] != dat00_low[0x14] && ((dat00[0x13] & 0x0004) == 0))//主菜单界面移动触发
   58   2          {
C251 COMPILER V5.60.0,  Main_Menu                                                          24/04/24  23:59:19  PAGE 2   

   59   3            dat00[0x15] = dat00[0x14];
   60   3            dat00[0x13] |= 0x0004;
   61   3          }
   62   2          if(dat00[0x13] & 0x0004)//主菜单界面移动触发
   63   2          {
   64   3              
   65   3              if(dat00[0x12] == 0x0000)
   66   3              {
   67   4                  if((dat00[0x13] & 0x0001)== 0x0000)
   68   4                  {
   69   5                      dat00[0x12] = 48;
   70   5                      
   71   5                      fast_SleepQueue_aheadW1(6,1,48);
   72   5      
   73   5                    
   74   5                      dat00[0x13] |= 0x0001;
   75   5                  }   
   76   4              }
   77   3              //dat00_flag[0x01]  = 0;
   78   3              if((dat00[0x12] != 0x0000) && (dat00[0x13] & 0x0001))
   79   3              {
   80   4                  if(dat00[0x15] > dat00_low[0x14])
   81   4                  {
   82   5                     UI_main(1);
   83   5                     dat00[0x13] |= 0x0002;
   84   5                  }
   85   4                  else if(dat00[0x15] < dat00_low[0x14])
   86   4                  {
   87   5                     UI_main(0);
   88   5                    dat00[0x13] &= 0xFFFD;
   89   5                     
   90   5                  } 
   91   4                  dat00[0x12]--;
   92   4                  if(dat00[0x12] == 0x0000)
   93   4                  {
   94   5                      dat00[0x13] &= 0xfffe;
   95   5                      dat00[0x13] &= 0xfffB;
   96   5      
   97   5                     SleepQueue_behindW(6,1);
   98   5      
   99   5                    if(dat00[0x15] > dat00_low[0x14])
  100   5                    {
  101   6                      dat00_low[0x14]++;
  102   6      
  103   6                      if(dat00_low[0x14] > 0x8010 && dat00[0x14] > 0x8010)  
  104   6                      {
  105   7                        dat00_low[0x14]=(dat00_low[0x14] % 16) + 0x8000;
  106   7                        dat00[0x14]=(dat00[0x14] % 16) + 0x8000;
  107   7                      }             
  108   6                    }
  109   5                    else if(dat00[0x15] < dat00_low[0x14])
  110   5                    {
  111   6                      dat00_low[0x14]--;
  112   6                      if(dat00_low[0x14] < 0x7FF0 && dat00[0x14] < 0x7FF0)  
  113   6                      {
  114   7                        dat00_low[0x14]=(dat00_low[0x14] % 16) + 0x8000;
  115   7                        dat00[0x14]=(dat00[0x14] % 16) + 0x8000;
  116   7                      } 
  117   6                    }
  118   5                    if(dat00[0x14] == dat00_low[0x14])
  119   5                    {
  120   6                        if(!P45)
  121   6                        {
  122   7                          data00_Change(0x14,1);
  123   7                        }
  124   6                        if(!P27)
C251 COMPILER V5.60.0,  Main_Menu                                                          24/04/24  23:59:19  PAGE 3   

  125   6                        {
  126   7                          data00_Change(0x14,0);
  127   7                        }  
  128   6                    }   
  129   5                  }
  130   4              }
  131   3              
  132   3          }
  133   2        }
  134   1      }
  135          
  136          
  137          
  138          
  139          void IU_Main_Menu_Switch()
  140          {
  141   1          dat00[0x12] = 0;
  142   1          dat00[0x13] = 0;
  143   1      //    Sleep_Queue_count = 0;
  144   1      //    Sleep_Queue_count_target = 0;
  145   1          dat00_low[0x14]=dat00[0x11]  + 0x8000;
  146   1          dat00[0x14] = dat00_low[0x14];
  147   1          dat00[0x15] = dat00[0x14];
  148   1          
  149   1           
  150   1          
  151   1      }
  152          
  153          
  154          
  155          
  156          
  157          
  158          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       842     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
