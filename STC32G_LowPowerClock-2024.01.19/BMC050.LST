C251 COMPILER V5.60.0,  BMC050                                                             24/04/24  23:59:18  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE BMC050
OBJECT MODULE PLACED IN ..\firmware\BMC050.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE BMC050.c XSMALL OPTIMIZE(9,SPEED) BROWSE DEBUG TABS(2) OBJECT(..\firmw
                    -are\BMC050.obj) 

stmt  level    source

    1          #include "BMC050.h"
    2          #include "time.h"
    3          #include "UART1.h"
    4          #include "IIC.h"
    5          #include "CompassMenu.h"
    6          #include "DATA.h"
    7          
    8          
    9          extern u8 xdata DMABuffer[96];
   10          
   11          const int code angle[15] = {11520,6801,3593,1824,916,458,229,115,57,29,14,7,4,2,1};
   12          
   13          
   14          extern u16 xdata dat00[System_data_num];
   15          extern u16 xdata dat00_low[System_data_num];
   16          extern u8 xdata dat00_flag[System_data_num];
   17          
   18          /****************************** 睡眠寄存器组 ***********************************/
   19          extern u16 Sleep_Queue[Sleep_queue_num];
   20          extern u16 Sleep_Queue_task[Sleep_queue_num];
   21          extern u16 Sleep_Queue_count;
   22          extern u16 Sleep_Queue_count_target;
   23          
   24          
   25          
   26          int Magnetism_X[7] = {0};
   27          int Magnetism_X1[7] = {0};
   28          
   29          int Magnetism_Y[7] = {0};
   30          int Magnetism_Y1[7] = {0};
   31          
   32          
   33          int Magnetism_JD[5] = {0};
   34          int Magnetism_JD1[5] = {0};
   35          
   36          u16 JD_low = 0;
   37          u8 JD_low_num = 0;
   38          
   39          int Get_Magnetism_dat(int *dat1,u16 dat,u8 num)
   40          {
   41   1          int adc_dat = 0;
   42   1          u8 i = 0;
   43   1          num = num-1;
   44   1          for(i=0; i<num; i++)
   45   1          {
   46   2              dat1[i] = dat1[i+1];
   47   2          }
   48   1          dat1[num] = (int)dat;
   49   1          num++;
   50   1          for(i=0; i<num; i++)
   51   1          {
   52   2              adc_dat += dat1[i];
   53   2          }
   54   1          adc_dat = adc_dat/num;
   55   1      
   56   1          return  adc_dat;
   57   1      }
   58          
C251 COMPILER V5.60.0,  BMC050                                                             24/04/24  23:59:18  PAGE 2   

   59          int convert_1(u16 dat1)
   60          {
   61   1          int adc_dat=0;
   62   1      
   63   1      
   64   1          if(dat1 & 0x1000)
   65   1          {
   66   2              adc_dat= 0x1fff - dat1 + 1;
   67   2              adc_dat = adc_dat*(-1);
   68   2          }
   69   1          else
   70   1          {
   71   2              adc_dat = dat1;
   72   2          }
   73   1      
   74   1          return  adc_dat;
   75   1      }
   76          
   77          
   78          
   79          
   80          
   81          
   82          
   83          
   84          
   85          
   86          void Magnetometer_initi()
   87          {
   88   1          IIC_W2bit(0x22,0x4b,0x01);// 0x01 休眠模式 0x80 软复位
   89   1          Sleep_delay_Time(20);
   90   1          IIC_W2bit(0x22,0x51,0x0A);//XY 重复21次
   91   1          IIC_W2bit(0x22,0x4C,0x00);
   92   1          IIC_W2bit(0x22,0x4b,0x00);//挂起
   93   1      }
   94          
   95          
   96          void  Magnetometer_OPEN()
   97          {
   98   1          IIC_W2bit(0x22,0x4b,0x01);//切换到休眠模式
   99   1          IIC_W2bit(0x22,0x4C,0x02);//采样速度10Hz,强制采样模式
  100   1          Sleep_delay_Time(20);
  101   1      }
  102          
  103          void  Magnetometer_Close()
  104          {
  105   1          IIC_W2bit(0x22,0x4b,0x00);//切换到休眠模式
  106   1      }
  107          
  108          
  109          
  110          
  111          
  112          
  113          
  114          
  115          
  116          
  117          
  118          
  119          
  120          
  121          
  122          
  123          
  124          
C251 COMPILER V5.60.0,  BMC050                                                             24/04/24  23:59:18  PAGE 3   

  125          
  126          
  127          
  128          void ggg(u8 addre,long num)
  129          {
  130   1      
  131   1          if(num >= 0)
  132   1          {
  133   2              DMABuffer[addre] = 43;
  134   2          }
  135   1          else
  136   1          {
  137   2              DMABuffer[addre] = 45;
  138   2              num = num*(-1);
  139   2          }
  140   1      
  141   1          DMABuffer[addre+1] = ((num % 100000) /10000) + 48;
  142   1          DMABuffer[addre+2] = ((num % 10000) / 1000) + 48;
  143   1          DMABuffer[addre+3] = ((num % 1000) / 100) + 48;
  144   1          DMABuffer[addre+4] = ((num % 100) / 10) + 48;
  145   1          DMABuffer[addre+5] = (num % 10) + 48;
  146   1      
  147   1      
  148   1      
  149   1      
  150   1      
  151   1      }
  152          
  153          
  154          
  155          
  156          
  157          
  158          
  159          
  160          u16 atan(int x1,int y1)//结果需要/256
  161          {
  162   1          int i =0;
  163   1          long x_new = 0;
  164   1          long y_new = 0;
  165   1          long xx,yy;
  166   1          long angleSum =0;
  167   1          long x =x1;
  168   1          long y =y1;
  169   1      
  170   1          if(x<0) x = x*(-1);
  171   1          if(y<0) y = y*(-1);
  172   1      
  173   1          x *= 1024;
  174   1          y *= 1024;
  175   1          for(i=0; i<15; i++)
  176   1          {
  177   2              yy = (y>>i);
  178   2              xx = (x>>i);
  179   2              if(y>0)
  180   2              {
  181   3                  x_new = (x + yy);
  182   3                  y_new = (y - xx);
  183   3                  angleSum += angle[i];
  184   3              }
  185   2              else
  186   2              {
  187   3                  x_new = x - yy;
  188   3                  y_new = y + xx;
  189   3                  angleSum -= angle[i];
  190   3              }
C251 COMPILER V5.60.0,  BMC050                                                             24/04/24  23:59:18  PAGE 4   

  191   2              x = x_new;
  192   2              y = y_new;
  193   2          }
  194   1      
  195   1          return  (u16)angleSum;
  196   1      }
  197          
  198          
  199          void Angle_calculation(int x1,int y1)
  200          {
  201   1          u8 a=0;
  202   1          u8 b=0;
  203   1          u16 Angle = 0;
  204   1      
  205   1          if(x1<0) a=1;
  206   1          if(y1<0) b=1;
  207   1      
  208   1          if(x1 == 0)
  209   1          {
  210   2              if(y1 > 0)
  211   2              {
  212   3                  Angle =90;
  213   3              }
  214   2              else
  215   2              {
  216   3                  Angle =270;
  217   3              }
  218   2          }
  219   1          else if(y1 == 0)
  220   1          {
  221   2              if(x1 > 0)
  222   2              {
  223   3                  Angle =360;
  224   3              }
  225   2              else
  226   2              {
  227   3                  Angle =180;
  228   3              }
  229   2          }
  230   1          else
  231   1          {
  232   2              Angle = (atan(y1,x1))/256;
  233   2      
  234   2              if(!a && b)
  235   2              {
  236   3                  Angle = Angle +270;
  237   3              }
  238   2              else if(a && b)
  239   2              {
  240   3                  Angle = 270 -Angle;
  241   3              }
  242   2              else if(a && !b)
  243   2              {
  244   3                  Angle = Angle +90;
  245   3              }
  246   2              else
  247   2              {
  248   3                  Angle = 90 -Angle;
  249   3              }
  250   2      
  251   2          }
  252   1      
  253   1          dat00[0x0068] = Angle;
  254   1      
  255   1      
  256   1      
C251 COMPILER V5.60.0,  BMC050                                                             24/04/24  23:59:18  PAGE 5   

  257   1      
  258   1      
  259   1      
  260   1      }
  261          
  262          
  263          
  264          
  265          
  266          
  267          
  268          
  269          
  270          
  271          
  272          u16 Magnetometer_measure_1(u8 aa,u8 b)
  273          {
  274   1          u8 a = 0;
  275   1          u16 c = 0;
  276   1          a = RecvData();                             //读取数据2
  277   1          SendACK();
  278   1          c = RecvData();                             //读取数据2
  279   1          if(b)
  280   1          {
  281   2              SendACK();
  282   2          }
  283   1          else
  284   1          {
  285   2              SendNAK();
  286   2              Stop();
  287   2          }
  288   1          c = (((c<<8)+a)>>aa);
  289   1          return c;
  290   1      
  291   1      }
  292          
  293          
  294          void Magnetometer_measure()
  295          {
  296   1      //    u8 a = 0;
  297   1          u16 c = 0;
  298   1          u16 b=0;
  299   1      
  300   1          IIC_W2bit(0x22,0x4C,0x02);//采样速度10Hz,正常采样模式
  301   1      
  302   1      
  303   1          Start(); //发送起始命令
  304   1          SendData(0x22);                         //发送设备地址+写命令
  305   1          DMABuffer[0] = RecvACK();
  306   1          SendData(0x42);                             //发送设备地址+写命令
  307   1          RecvACK();
  308   1          // Stop();
  309   1          Start(); //发送起始命令
  310   1          SendData(0x23);                         //发送设备地址+写命令
  311   1          RecvACK();
  312   1      
  313   1          dat00[0x0060] = Magnetometer_measure_1(3,1);
  314   1          dat00[0x0061] = Magnetometer_measure_1(3,1);
  315   1          dat00[0x0062] = Magnetometer_measure_1(1,1);
  316   1          dat00[0x0063] = Magnetometer_measure_1(2,0);
  317   1      
  318   1      
  319   1      
  320   1          dat00[0x0060] = (u16)convert_1(dat00[0x0060]);
  321   1          dat00[0x0061] = (u16)convert_1(dat00[0x0061]);
  322   1      
C251 COMPILER V5.60.0,  BMC050                                                             24/04/24  23:59:18  PAGE 6   

  323   1      
  324   1      
  325   1          dat00_low[0x0060] = (u16)Get_Magnetism_dat(Magnetism_X,dat00[0x0060],7);
  326   1          dat00_low[0x0060] = (u16)Get_Magnetism_dat(Magnetism_X1,dat00_low[0x0060],7);
  327   1      
  328   1          dat00_low[0x0061] = (u16)Get_Magnetism_dat(Magnetism_Y,dat00[0x0061],7);
  329   1          dat00_low[0x0061] = (u16)Get_Magnetism_dat(Magnetism_Y1,dat00_low[0x0061],7);
  330   1      
  331   1      
  332   1      
  333   1      
  334   1      
  335   1      
  336   1      //    dat00_low[0x0060] = (u16)Get_Magnetism_dat(Magnetism_X,convert_1(dat00[0x0060]));
  337   1      //    dat00_low[0x0061] = (u16)Get_Magnetism_dat(Magnetism_Y,convert_1(dat00[0x0061]));
  338   1      
  339   1      
  340   1      
  341   1      
  342   1          if( (int)dat00[0x0060] > (int)dat00[0x0064])
  343   1          {
  344   2              dat00[0x0064] = dat00_low[0x0060];
  345   2          }
  346   1          if((int)dat00[0x0060] < (int)dat00_low[0x0064])
  347   1          {
  348   2              dat00_low[0x0064] = dat00_low[0x0060];
  349   2          }
  350   1          if( (int)dat00[0x0061] > (int)dat00[0x0065])
  351   1          {
  352   2              dat00[0x0065] = dat00_low[0x0061];
  353   2          }
  354   1          if((int)dat00[0x0061] < (int)dat00_low[0x0065])
  355   1          {
  356   2              dat00_low[0x0065] = dat00_low[0x0061];
  357   2          }
  358   1      
  359   1      
  360   1          dat00[0x0066] = (u16)(((int)dat00[0x0064] + (int)dat00_low[0x0064])/2);
  361   1          dat00_low[0x0066] = (u16)(((int)dat00[0x0065] + (int)dat00_low[0x0065])/2);
  362   1      
  363   1      
  364   1          dat00[0x0067] = (u16)(((int)dat00[0x0066] - (int)dat00_low[0x0060]));
  365   1          dat00_low[0x0067] = (u16)(((int)dat00_low[0x0066] - (int)dat00_low[0x0061]));
  366   1      
  367   1          Angle_calculation((int)dat00[0x0067],(int)dat00_low[0x0067]);
  368   1      
  369   1      
  370   1      }
  371          
  372          
  373          
  374          
  375          
  376          
  377          
  378          
  379          
  380          
  381          
  382          
  383          
  384          
  385          
  386          
  387          
  388          
C251 COMPILER V5.60.0,  BMC050                                                             24/04/24  23:59:18  PAGE 7   

  389          
  390          
  391          
  392          
  393          
  394          
  395          
  396          
  397          
  398          
  399          
  400          
  401          
  402          
  403          void Magnetometer_falg_0080()
  404          {
  405   1      
  406   1      
  407   1          if(Sleep_Queue_task[0] & 0x0080)
  408   1          {
  409   2              Sleep_Queue_task[0] &=~0x0080;
  410   2              if(dat00[0x10] == 0x0005)
  411   2              {
  412   3                  Magnetometer_measure();
  413   3                  UI_CompassMenu();
  414   3                  SleepQueue_aheadW1(250,0x0080,0);
  415   3              }
  416   2          }
  417   1      }
  418          
  419          
  420          
  421          
  422          
  423          
  424          
  425          
  426          
  427          
  428          
  429          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1330     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        79          9
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       111     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
