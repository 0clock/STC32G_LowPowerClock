C251 COMPILER V5.60.0,  main                                                               24/04/24  23:59:19  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN ..\firmware\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE main.c XSMALL OPTIMIZE(9,SPEED) BROWSE DEBUG TABS(2) OBJECT(..\firmwar
                    -e\main.obj) 

stmt  level    source

    1          #include "STC32G.h"
    2          #include "stdio.h"
    3          #include "intrins.h"
    4          #include "time.h"
    5          #include "IIC.h"
    6          #include "UART1.h"
    7          #include "SHT41.h"
    8          #include "SPL06.h"
    9          #include "IO.h"
   10          #include "BH1745.h"
   11          #include "OLED.h"
   12          #include "UI.h"
   13          #include "DATA.h"
   14          #include "logic.h"
   15          #include "SecondaryMenu.h"
   16          #include "ThreeMenu.h"
   17          #include "flag.h"
   18          #include "TV_Mode.h"
   19          #include "INS5699S.h"
   20          #include "ADC.h"
   21          #include "BMC050.h"
   22          #include "Time_Interruption.h"
   23          #include "SleepMode.h"
   24          ////REMOVEUNUSED
   25          
   26          /****************************** 用户定义宏 ***********************************/
   27          
   28          /*****************************************************************************/
   29          
   30          /*************  本地常量声明    **************/
   31          // u16 xdata JCQ03_00[32];
   32          u32 xdata JCQ06_00[5];
   33          
   34          //**************JCQ06_00***********************
   35          // 00 温度 ×100 ℃
   36          // 01 湿度 ×100 RH
   37          // 02 SPL06气压 原始值
   38          // 03 SPL06温度 原始值
   39          // 04 气压 ×1   Pa
   40          //*************************************
   41          
   42          extern u16 xdata dat00[System_data_num];
   43          extern u16 xdata dat00_low[System_data_num];
   44          extern u8 xdata dat00_flag[System_data_num];
   45          
   46          /*************  本地变量声明  功能寄存器  **************/
   47          extern u8 xdata DMABuffer[96];
   48          
   49          /*************  中断任务 标志位 专用变量（妈的别优化了）  **************/
   50          volatile u32 Interrupt_flag = 0;
   51          
   52          /****************************** 睡眠寄存器组 ***********************************/
   53          extern u16 Sleep_Queue[Sleep_queue_num];
   54          
   55          extern u16 Sleep_Queue_task[Sleep_queue_num];
   56          
   57          extern u16 Sleep_Queue_count;
   58          extern u16 Sleep_Queue_count_target;
C251 COMPILER V5.60.0,  main                                                               24/04/24  23:59:19  PAGE 2   

   59          
   60          extern u8 xdata Time_New[7];
   61          extern u8 xdata Time_Low[7];
   62          extern u8 xdata Time_int[7];
   63          
   64          /********************* 主函数 *************************/
   65          
   66          u32 dat1 = 0;
   67          u32 dat2 = 0;
   68          u32 dat3 = 0;
   69          u32 dat4 = 0;
   70          u32 dat5 = 0;
   71          
   72          u32 dat6 = 0;
   73          u32 dat7 = 0;
   74          u8 uu = 0;
   75          u16 sleep_dat = 0;
   76          
   77          u16 gg = 0;
   78          
   79          // REMOVEUNUSED
   80          
   81          void Buzzer_task()
   82          {
   83   1          if (dat00[2] & 0x0001)
   84   1          {
   85   2              if (dat00[0xC3] == 1)
   86   2              {
   87   3                  if (dat00[0xC1] == 1)
   88   3                  {
   89   4                      Buzzer_Open();
   90   4                      SleepQueue_aheadW1(dat00[0xC2], 0x0020, 0);
   91   4                  }
   92   3              }
   93   2              dat00[2] &= ~0x0001;
   94   2          }
   95   1      }
   96          
   97          void main(void)
   98          {
   99   1          u8 i = 0;
  100   1          u8 a = 0;
  101   1          u8 b = 0;
  102   1          u16 c = 0;
  103   1          u32 d = 0;
  104   1          u8 ii = 0;
  105   1          u8 datac = 0;
  106   1          u16 kk = 0;
  107   1      
  108   1          EAXFR = 1;
  109   1          CKCON = 0x00;
  110   1          WTST = 0x00; // 设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最
             -快
  111   1          P54RST = 1;
  112   1      
  113   1          //  IRC主时钟30M
  114   1          CLKSEL |= 0x80;  // 选择PLL输出144M
  115   1          USBCLK &= ~0x60; // PLL输入时钟1分频
  116   1          USBCLK |= 0x20;  // PLL输入时钟2分频
  117   1          USBCLK |= 0x80;  // 使能PLL倍频
  118   1          delay_ms(1);     // 等待PLL锁频
  119   1          // 选择HSPWM/HSSPI时钟
  120   1          CLKSEL |= 0x40; // HSPWM/HSSPI选择PLL输出时钟为时钟源
  121   1          HSCLKDIV = 6;   // HSPWM/HSSPI时钟源不分频
  122   1      
  123   1          //    P0 = 0xff;  P1 = 0xff;
C251 COMPILER V5.60.0,  main                                                               24/04/24  23:59:19  PAGE 3   

  124   1          //    P2 = 0xff;  P3 = 0xff;
  125   1          //    P4 = 0xfF;  P5 = 0xff;
  126   1          //    P6 = 0xff;  P7 = 0xff;
  127   1          //
  128   1          //    P0M0 = 0xff;     P0M1 = 0xff;
  129   1          //    P1M0 = 0xff;     P1M1 = 0xff;
  130   1          //    P2M0 = 0xff;     P2M1 = 0xff;
  131   1          //    P3M0 = 0xff;     P3M1 = 0xff;
  132   1          //    P4M0 = 0xff;     P4M1 = 0xff;
  133   1          //    P5M0 = 0xef;     P5M1 = 0xef;
  134   1          //    P6M0 = 0xff;     P6M1 = 0xff;
  135   1          //    P7M0 = 0xff;     P7M1 = 0xff;
  136   1      
  137   1          //    P0IE=0x00;  P1IE=0x00;
  138   1          //    P2IE=0x00;  P3IE=0x10;//0x10
  139   1          //    P4IE=0x00;  P5IE=0x10;
  140   1          //    P6IE=0x00;  P7IE=0x00;
  141   1      
  142   1          //  SleepMode_ON();
  143   1      
  144   1          _nop_();
  145   1          _nop_();
  146   1          _nop_();
  147   1          _nop_();
  148   1          //    _nop_();
  149   1      
  150   1          IO_Init();
  151   1          OLED_POW(0);
  152   1          RESET54();
  153   1      
  154   1          ADC_init();
  155   1          Clock_INT();
  156   1          key_int();
  157   1          IIC_int();
  158   1      
  159   1          Array_Initialization_();
  160   1      
  161   1          IIC_W2bit(0x64, 0x21, 0x80); // 关闭芯片K2开关
  162   1          Delay10us();
  163   1          IIC_W2bit(0x64, 0x0F, 0x71); // 配置开启1S定时 0x60
  164   1          Delay10us();
  165   1          //    IIC_W2bit(0x64,0x0D,0x02);//关闭定时器
  166   1          //    IIC_W2bit(0x64,0x0E,0x00);//清除警告
  167   1      
  168   1          BH1745_Init();
  169   1          delay_ms(1);
  170   1          SHT41_Init();
  171   1          delay_ms(1);
  172   1          SPL06_Init();
  173   1          delay_ms(1);
  174   1          delay_ms(1);
  175   1          SPI_init();
  176   1          SPI_DMA_Config();
  177   1      
  178   1          Magnetometer_initi();
  179   1      
  180   1          //      delay_ms(1);
  181   1      
  182   1          //    IIC_W2bit(0x22,0x4b,0x01);
  183   1          //    delay_ms(1);
  184   1          //    IIC_W2bit(0x22,0x4C,0x00);
  185   1          //    delay_ms(1);
  186   1          //    IIC_W2bit(0x22,0x4b,0x00);
  187   1      
  188   1          i = 1;
  189   1          delay_ms(1);
C251 COMPILER V5.60.0,  main                                                               24/04/24  23:59:19  PAGE 4   

  190   1          IIC_W2bit(0x32, 0x11, 0x5E);
  191   1          delay_ms(1);
  192   1          i = IIC_W2bit(0x32, 0x11, 0x9E);
  193   1      
  194   1          //    Magnetometer_initi();
  195   1      
  196   1          //    b = IIC_ResponseText();
  197   1      
  198   1          //    delay_ms(1);
  199   1          //    IIC_W2bit(0x32,0x11,0x5E);//低功耗模式
  200   1          //    delay_ms(1);
  201   1          //    IIC_W2bit(0x32,0x11,0x9E);//从低功耗切换到挂起模式
  202   1          //    delay_ms(1);
  203   1      
  204   1          P2PU = 0x01; // 打开OLED  RSET上拉电阻
  205   1          OLED_Init();
  206   1          OLED_Fill(0x00);
  207   1      
  208   1          P2PU = 0x01; // 打开OLED  RSET上拉电阻
  209   1      
  210   1          //     TVMode_int();
  211   1          //    OLED_32X32(0,0,0,0,32);
  212   1      
  213   1          //    while(1);
  214   1      
  215   1          //         OLED_ED();
  216   1          //         OLED_POW_LOW();
  217   1          //          P1PU = 0x00;
  218   1          //          P1DR = 0x00;
  219   1          //          P1SR = 0x00;
  220   1          //          P2PU = 0x00;
  221   1          //          P2DR = 0x00;
  222   1          //          P2SR = 0x00;
  223   1      
  224   1          //          P0IE = 0;
  225   1          //          P1IE = 0;
  226   1          //          P2IE = 0x00;
  227   1          //          P3IE = 0;
  228   1          //          P5IE = 0x10;
  229   1          //          P4IE = 0;
  230   1          //          P6IE = 0;
  231   1          //          P7IE = 0;
  232   1      
  233   1          //          P1 = 0xf8;
  234   1          //          P2 = 0xff;
  235   1          //          P3 = 0xff;
  236   1          //          P4 = 0xfF;
  237   1          //          P5 = 0xf3;
  238   1          //          P6 = 0xff;
  239   1          //          P7 = 0xff;
  240   1      
  241   1          //          I2CCFG &=0x7f;
  242   1          //          SPCTL &=0xBf;
  243   1      
  244   1          //          P0M0 = 0xff;                                //设置P3.0~P3.7为开漏模式
  245   1          //          P0M1 = 0xff;
  246   1      
  247   1          //          P1M0 = 0x07;                                //设置P3.0~P3.7为开漏模式
  248   1          //          P1M1 = 0x07;
  249   1      
  250   1          //          P2M0 = 0x3f;                                //设置P3.0~P3.7为开漏模式
  251   1          //          P2M1 = 0x3f;
  252   1      
  253   1          //          P3M0 = 0xff;                                //设置P3.0~P3.7为开漏模式
  254   1          //          P3M1 = 0xff;
  255   1      
C251 COMPILER V5.60.0,  main                                                               24/04/24  23:59:19  PAGE 5   

  256   1          //          P4M0 = 0xff;                                //设置P3.0~P3.7为开漏模式
  257   1          //          P4M1 = 0xff;
  258   1      
  259   1          //          P6M0 = 0xff;                                //设置P3.0~P3.7为开漏模式
  260   1          //          P6M1 = 0xff;
  261   1      
  262   1          //          P7M0 = 0xff;                                //设置P3.0~P3.7为开漏模式
  263   1          //          P7M1 = 0xff;
  264   1      
  265   1          //          ADC_POWER = 0;
  266   1      
  267   1          //    P0INTE = 0x00;//允许端口中断
  268   1          //    P0WKUE = 0x00;//允许掉电唤醒
  269   1          //
  270   1          //    P3INTE = 0x10;//允许端口中断
  271   1          //    P3WKUE = 0x10;//允许掉电唤醒
  272   1          //
  273   1          //    P5WKUE = 0x00;//允许掉电唤醒
  274   1          //
  275   1          //    P4INTE = 0x00;//允许端口中断
  276   1          //    P4WKUE = 0x00;//允许掉电唤醒
  277   1          //    P2INTE = 0x00;//允许端口中断
  278   1          //    P2WKUE = 0x00;//允许掉电唤醒
  279   1      
  280   1          //    _nop_();
  281   1          //    _nop_();
  282   1          //    _nop_();
  283   1          //    _nop_();
  284   1          //    PD = 1;                            //MCU进入掉电模式
  285   1          //    _nop_();
  286   1          //    _nop_();
  287   1          //    _nop_();
  288   1          //    _nop_();
  289   1      
  290   1          INS5699_timeW(Time_int);
  291   1          delay_ms(1);
  292   1          INS5699_timeR();
  293   1          //    INS5699_timer_clean();
  294   1      
  295   1          dat00[0] |= 0x0002;
  296   1          dat00[0x10] = 0x0020;
  297   1          dat00_flag[0x10] = 1;
  298   1          SleepQueue_aheadW1(5, 1, 0);
  299   1      
  300   1          P0INTE |= 0x02; // 允许端口中断
  301   1          P0IM1 |= 0xFD;  // 下降沿中断
  302   1          P0IM0 &= 0xFD;
  303   1          P0WKUE |= 0x02; // 允许掉电唤醒
  304   1          EA = 1;
  305   1      
  306   1          //    SleepMode_ON();
  307   1      
  308   1          //  P23=1;
  309   1          //  P25=1;
  310   1          // while (1);
  311   1      
  312   1          while (1)
  313   1          {
  314   2      
  315   2              Time_Interruption_1S();
  316   2              flag_handle();
  317   2              dat00_Change();
  318   2              IU_Thread();
  319   2              key_thread1_new();
  320   2      
  321   2              // Buzzer_task();
C251 COMPILER V5.60.0,  main                                                               24/04/24  23:59:19  PAGE 6   

  322   2      
  323   2              // debug_8x8(b,64,1);
  324   2      
  325   2              if (Sleep_Queue_task[0] == 0)
  326   2              {
  327   3                  SleepQueue_MoveLeft(1);
  328   3              }
  329   2      
  330   2              SPI_DMA_delay();
  331   2              Sleep_Thread();
  332   2      
  333   2              UI_switch(); // 1号任务
  334   2              SHT41_falg_0004();
  335   2              SPL06_PR_R_flag0008();
  336   2              SPL06_PR_P_flag0010();
  337   2              BH1745R_flag0002();
  338   2              Buzzer_falg_0020();
  339   2              ADC_falg_0040();
  340   2              Magnetometer_falg_0080();
  341   2          }
  342   1      }
  343          
  344          void INT0_Isr() interrupt 0
  345          {
  346   1      }
  347          
  348          void INT1_Isr() interrupt 2
  349          {
  350   1      }
  351          
  352          void KZ_isr() interrupt 13
  353          {
  354   1          u8 intf = 0;
  355   1      
  356   1          intf = P0INTF;
  357   1          if (intf)
  358   1          {
  359   2              // dat00[0] |= 0x0001;
  360   2              P0INTF = 0;
  361   2              if (intf & 0x02)
  362   2              {
  363   3                  dat00_low[0x00E2]++;
  364   3                  if (dat00_low[0x00E2] >= 2)
  365   3                  {
  366   4                      P0INTE &= ~0x02; // 允许端口中断
  367   4                      P0WKUE &= ~0x02; // 允许掉电唤醒
  368   4                  }
  369   3              }
  370   2          }
  371   1      
  372   1          intf = P4INTF;
  373   1          if (intf)
  374   1          {
  375   2              // dat00[0] |= 0x0001;
  376   2              P4INTF = 0;
  377   2              if (intf & 0x20)
  378   2              {
  379   3                  dat00[0] |= 0x0001;
  380   3                  dat00[2] |= 0x0001;
  381   3                  // Delay10us();
  382   3                  Add_key(1);
  383   3                  dat00[1] &= 0x0001;
  384   3              }
  385   2              if (intf & 0x40)
  386   2              {
  387   3                  dat00[0] |= 0x0001;
C251 COMPILER V5.60.0,  main                                                               24/04/24  23:59:19  PAGE 7   

  388   3                  dat00[2] |= 0x0001;
  389   3                  // Delay10us();
  390   3                  SET_key(); // 主菜单 按下确认件
  391   3                  dat00[1] = 0;
  392   3              }
  393   2          }
  394   1      
  395   1          intf = P2INTF;
  396   1          if (intf)
  397   1          {
  398   2      
  399   2              // miao(P2INTF);
  400   2              P2INTF = 0;
  401   2              if (intf & 0x80)
  402   2              {
  403   3      
  404   3                  dat00[0] |= 0x0001;
  405   3                  dat00[2] |= 0x0001;
  406   3                  // Delay10us();
  407   3                  Add_key(0);
  408   3                  dat00[1] &= 0x0002;
  409   3              }
  410   2              if (intf & 0x40)
  411   2              {
  412   3                  dat00[0] |= 0x0001;
  413   3                  dat00[2] |= 0x0001;
  414   3                  // Delay10us();
  415   3                  ESC_key(); // 二级菜单 按下退出
  416   3                  dat00[1] = 0;
  417   3              }
  418   2          }
  419   1          intf = P5INTF;
  420   1          if (intf)
  421   1          {
  422   2              P5INTF = 0;
  423   2              if (intf & 0x01)
  424   2              {
  425   3                  dat00[0] |= 0x0002;
  426   3              }
  427   2          }
  428   1          P2INTF = 0;
  429   1          P4INTF = 0;
  430   1          P5INTF = 0;
  431   1          P0INTF = 0;
  432   1          P1INTF = 0;
  433   1          P3INTF = 0;
  434   1          P6INTF = 0;
  435   1          P7INTF = 0;
  436   1      
  437   1          //    UART1_DMA();
  438   1      
  439   1          // nian(gg++,6);
  440   1          SPI_DMA();
  441   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       908     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        20     ------
  xdata-const size     =    ------     ------
  edata size           =        37     ------
  bit size             =    ------     ------
C251 COMPILER V5.60.0,  main                                                               24/04/24  23:59:19  PAGE 8   

  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        81     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
