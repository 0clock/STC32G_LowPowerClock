C251 COMPILER V5.60.0,  SecondaryMenu                                                      24/01/24  00:35:53  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE SecondaryMenu
OBJECT MODULE PLACED IN SecondaryMenu.OBJ
COMPILER INVOKED BY: C:\Keil_v51\C251\BIN\C251.EXE SecondaryMenu.c XSMALL OPTIMIZE(9,SPEED) BROWSE DEBUG TABS(2) 

stmt  level    source

    1          #include "SecondaryMenu.h"
    2          #include "OLED.h"
    3          #include "DATA.h"
    4          
    5          extern u16 xdata dat00[System_data_num];
    6          extern u16 xdata dat00_low[System_data_num];
    7          extern u8 xdata dat00_flag[System_data_num];
    8          extern u16 xdata dat00_max[System_data_num];
    9          
   10          /****************************** 睡眠寄存器组 ***********************************/
   11          extern u16 Sleep_Queue[Sleep_queue_num];
   12          extern u16 Sleep_Queue_count;
   13          extern u16 Sleep_Queue_count_target;
   14          
   15          extern u8  UI_dat[8][16];
   16          
   17          
   18          u8 p=0;
   19          
   20          u16 UI_S_F(char a)
   21          {
   22   1          u16 dat = 0;
   23   1          dat = ((dat00_low[0x17] + a) % GET_SCdat()) * 8;
   24   1          return dat;
   25   1      }
   26          
   27          
   28          
   29          u16 UI_S_F2(char a)
   30          {
   31   1          u16 dat = 0;
   32   1          dat = ((dat00_low[0x17] + a) % GET_SCdat());
   33   1          dat = dat + 1 + GET_SC();
   34   1          return dat;
   35   1      }
   36          
   37          
   38          void UIData_fill(u16 a,u8 b)
   39          {
   40   1          if(dat00[0x10] == 0x0008 && dat00[0x009E] == 1)
   41   1          {
   42   2            if(b==0)
   43   2            {
   44   3              OLED_AlarmClock_ZQ((u8)a);
   45   3            }
   46   2            else
   47   2            {
   48   3              OLED_AlarmClock_ZH((u8)a);
   49   3            }
   50   2          } 
   51   1          else if(dat00_max[a] & 0x0040)
   52   1          {
   53   2              OLED_Mean2_fill(8,0);//不显示数值，比如说设置
   54   2          }
   55   1          else if((dat00_max[a] & 0x003F) == 1)
   56   1          {
   57   2              OLED_Mean2_fill2((u8)dat00[a]);//填充开关符号
   58   2          }   
   59   1          else
C251 COMPILER V5.60.0,  SecondaryMenu                                                      24/01/24  00:35:53  PAGE 2   

   60   1          {
   61   2              OLED_Mean2_fill_num2(a);//填充数值
   62   2          }
   63   1      
   64   1           
   65   1          
   66   1      }
   67          
   68          
   69          
   70          void UI_SeMenu_Cursor_num(char num,u8 x,u8 yy1,u8 yy2,u8 a)
   71          {
   72   1          u8 address = 0;
   73   1          u16 address2 = 0;
   74   1          u16 address3 = 0; 
   75   1          address3 = UI_S_F(num);
   76   1          if(x==0)
   77   1          {
   78   2            if(dat00[0x10] == 0x0008 && dat00[0x009E] == 1)
   79   2            {
   80   3                UIData_fill(address3/8,0);
   81   3                address = 0x60;
   82   3                address2 = 0;
   83   3            }
   84   2            else
   85   2            {
   86   3              address = dat00[0x11];
   87   3              address2 = address3;
   88   3            }
   89   2          }
   90   1          else
   91   1          {
   92   2              if(dat00[0x10] == 1 | dat00[0x10] == 2 | dat00[0x10] == 4 | dat00[0x10] == 3 | dat00[0x10] == 0x0
             -B | dat00[0x10] == 0x0D | dat00[0x10] == 0x07 | (dat00[0x10] == 0x0008 && dat00[0x009E] == 2))//设置哪个可以进入
             -二级菜单
   93   2              {
   94   3                  UIData_fill(UI_S_F2(num),0);
   95   3                  address2 = 0;
   96   3                  address = 0x60;
   97   3              }
   98   2              else if(dat00[0x10] == 15)
   99   2              {
  100   3                  address = 0x40;
  101   3                  address2 = address3;
  102   3              }
  103   2              else if(dat00[0x10] == 0x0008 && dat00[0x009E] == 1)
  104   2              {
  105   3                  UIData_fill(address3/8,1);
  106   3                  address = 0x60;
  107   3                  address2 = 0;
  108   3              }       
  109   2          }
  110   1          OLED_16_16Vabc(TVR(address),address2,x,yy1,yy2,a,8);  //填充信息图案
  111   1      
  112   1      }
  113          
  114          void UI_SeMenu_Cursor_num_2(char num,u8 yy1,u8 yy2,u8 a)
  115          {
  116   1          UI_SeMenu_Cursor_num(num,0,yy1,yy2,a);
  117   1          UI_SeMenu_Cursor_num(num,64,yy1,yy2,a);
  118   1      }
  119          
  120          
  121          
  122          
  123          
C251 COMPILER V5.60.0,  SecondaryMenu                                                      24/01/24  00:35:53  PAGE 3   

  124           
  125          
  126          
  127          
  128          
  129          
  130          //****************************系统信息************************************
  131          
  132          
  133          
  134          
  135          
  136          //************************************************************************
  137          void UI_SecondaryMenu_G()
  138          {
  139   1          u8 yy = 0;
  140   1          UI_SeMenu_Cursor_num(-1,64,0,yy,0);
  141   1          yy =  24;
  142   1          UI_SeMenu_Cursor_num(0,64,yy,yy,1);
  143   1          yy = 48 ;
  144   1          UI_SeMenu_Cursor_num(1,64,yy,yy,1);
  145   1      
  146   1      }
  147          
  148          
  149          
  150          
  151          
  152          
  153          void UI_SecondaryMenu(u8 a)
  154          {
  155   1          u8 dat1 = 0;
  156   1          u8 dat2 = 0;
  157   1          u8 yy = 0;
  158   1      
  159   1      
  160   1          if(a)
  161   1          {
  162   2              if(dat00[0x12] > 8 | dat00[0x13] == 0)
  163   2              {
  164   3                  yy = 24 - (dat00[0x12] - 1) ;
  165   3                  if(dat00[0x13] == 0) yy = 0;
  166   3      
  167   3                  UI_SeMenu_Cursor_num_2(-1,0,yy,0);
  168   3      
  169   3              }
  170   2      
  171   2              yy =  (dat00[0x12] - 1) + dat2;
  172   2              if(dat00[0x13] == 0) yy = 24;
  173   2      
  174   2              UI_SeMenu_Cursor_num_2(0,yy,yy,1);
  175   2      
  176   2              yy = 24 + (dat00[0x12] - 1) + dat2;
  177   2              if(dat00[0x13] == 0) yy = 48;
  178   2      
  179   2              UI_SeMenu_Cursor_num_2(1,yy,yy,1);
  180   2      
  181   2              if(dat00[0x13] != 0)
  182   2              {
  183   3                  yy = 48 + (dat00[0x12] - 1);
  184   3      
  185   3                  UI_SeMenu_Cursor_num_2(2,yy,yy,1);
  186   3              }
  187   2          }
  188   1          else
  189   1          {
C251 COMPILER V5.60.0,  SecondaryMenu                                                      24/01/24  00:35:53  PAGE 4   

  190   2              if(dat00[0x12] <16)
  191   2              {
  192   3                  yy =(dat00[0x12] - 1);
  193   3                  UI_SeMenu_Cursor_num_2(-2,0,yy,0);
  194   3              }
  195   2      
  196   2              yy =  24 - (dat00[0x12] - 1);
  197   2              UI_SeMenu_Cursor_num_2(-1,yy,yy,1);
  198   2      
  199   2      
  200   2              yy = 48 - (dat00[0x12] - 1);
  201   2              UI_SeMenu_Cursor_num_2(0,yy,yy,1);
  202   2      
  203   2              yy = 72 - (dat00[0x12] - 1);
  204   2              UI_SeMenu_Cursor_num_2(1,yy,yy,1);
  205   2      
  206   2          }
  207   1          if(dat00[0x10] != 0x000F && !(dat00[0x10] == 0x0008 && dat00[0x009E] == 1))
  208   1          {
  209   2      
  210   2              if((dat00[0x13] == 0 | dat00[0x12] == 1) && (P45 && P27))
  211   2              {
  212   3                  dat1  = ((dat00[0x17] ) % GET_SCdat()) * 8;
  213   3                  OLED_16_16V2(TVR((u8)(dat00[0x10]-1)),dat1,0,3,0);
  214   3              }
  215   2          }
  216   1      
  217   1      }
  218          
  219          
  220          
  221          void IU_Secondary()
  222          {
  223   1          if(dat00[0x10] > 0 && dat00[0x10] < 16 && dat00[0x1A] == 0)
  224   1          {
  225   2              if(dat00[0x17] != dat00_low[0x17] && ((dat00[0x13] & 0x0004) == 0))//主菜单界面移动触发
  226   2              {
  227   3                  dat00[0x18] = dat00[0x17];
  228   3                  dat00[0x13] |= 0x0004;
  229   3              }
  230   2              if(dat00[0x13] & 0x0004)//主菜单界面移动触发
  231   2              {
  232   3                  if(dat00[0x12] == 0x0000)
  233   3                  {
  234   4                      if((dat00[0x13] & 0x0001)== 0x0000)
  235   4                      {
  236   5                          dat00[0x12] = 24;
  237   5                          fast_SleepQueue_aheadW1(15,1,24);
  238   5                          dat00[0x13] |= 0x0001;
  239   5                      }
  240   4                  }
  241   3                  if((dat00[0x12] != 0x0000) && (dat00[0x13] & 0x0001))
  242   3                  {
  243   4      
  244   4                      if(dat00[0x18] > dat00_low[0x17])
  245   4                      {
  246   5                          UI_SecondaryMenu(1);
  247   5                          dat00[0x13] |= 0x0002;
  248   5                      }
  249   4                      else if(dat00[0x18] < dat00_low[0x17])
  250   4                      {
  251   5                          UI_SecondaryMenu(0);
  252   5                          dat00[0x13] &= 0xFFFD;
  253   5      
  254   5                      }
  255   4                      dat00[0x12]--;
C251 COMPILER V5.60.0,  SecondaryMenu                                                      24/01/24  00:35:53  PAGE 5   

  256   4                      if(dat00[0x12] == 0x0000)
  257   4                      {
  258   5                          dat00[0x13] &= 0xfffe;
  259   5                          dat00[0x13] &= 0xfffB;
  260   5                          SleepQueue_behindW(15,1);
  261   5      
  262   5                          dat00[GET_SC() + 0x0f] = dat00[0x17] % GET_SCdat();
  263   5                          if(dat00[0x18] > dat00_low[0x17])
  264   5                          {
  265   6                              dat00_low[0x17]++;
  266   6      
  267   6                              if((dat00_low[0x17] > (dat00[GET_SC()] << 2)) && (dat00[0x17] > (dat00[GET_SC()] 
             -<< 2)))
  268   6                              {
  269   7                                  dat00_low[0x17]=(dat00_low[0x17] % dat00[GET_SC()]) + (dat00[GET_SC()] << 1);
  270   7                                  dat00[0x17]=(dat00[0x17] % dat00[GET_SC()]) + (dat00[GET_SC()] << 1);
  271   7                              }
  272   6                          }
  273   5                          else if(dat00[0x18] < dat00_low[0x17])
  274   5                          {
  275   6                              dat00_low[0x17]--;
  276   6                              if(dat00_low[0x17] < dat00[GET_SC()] && dat00[0x17] < dat00[GET_SC()])
  277   6                              {
  278   7                                  dat00_low[0x17]=(dat00_low[0x17] % dat00[GET_SC()]) + (dat00[GET_SC()] << 1);
  279   7                                  dat00[0x17]=(dat00[0x17] % dat00[GET_SC()]) + (dat00[GET_SC()] << 1);
  280   7                              }
  281   6                          }
  282   5                          if(dat00[0x17] == dat00_low[0x17])
  283   5                          {
  284   6                              if(!P45)
  285   6                              {
  286   7                                  data00_Change(0x17,1);
  287   7                              }
  288   6                              if(!P27)
  289   6                              {
  290   7                                  data00_Change(0x17,0);
  291   7                              }
  292   6                          }
  293   5                      }
  294   4      
  295   4                  }
  296   3      
  297   3      
  298   3      
  299   3              }
  300   2      
  301   2      
  302   2          }
  303   1      
  304   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1793     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         1          4
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
C251 COMPILER V5.60.0,  SecondaryMenu                                                      24/01/24  00:35:53  PAGE 6   

  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         5     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
